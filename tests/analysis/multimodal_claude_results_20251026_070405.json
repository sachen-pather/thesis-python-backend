{
  "metadata": {
    "test_date": "2025-10-26T07:04:05.568419",
    "total_circuits": 30,
    "model": "claude",
    "test_type": "three_way_multimodal"
  },
  "statistics": {
    "total_circuits": 30,
    "prompt_only": {
      "correct": 26,
      "total": 30,
      "percentage": 86.66666666666667
    },
    "mermaid_only": {
      "correct": 20,
      "total": 30,
      "percentage": 66.66666666666666
    },
    "combined": {
      "correct": 22,
      "total": 30,
      "percentage": 73.33333333333333
    }
  },
  "results": [
    {
      "circuit_id": 1,
      "circuit_name": "2-to-1 MUX",
      "category": "Combinational",
      "complexity": "simple",
      "original_prompt": "Design a 2-to-1 multiplexer with inputs a, b, select sel, and output out. Include testbench testing all combinations.",
      "model": "claude",
      "prompt_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 5.770764350891113,
        "simulation_time": 6.88210391998291,
        "lines_of_code": 48,
        "anomalous": false,
        "vae_anomalous": false
      },
      "mermaid_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 6.316417217254639,
        "simulation_time": 7.032825231552124,
        "lines_of_code": 62,
        "anomalous": false,
        "vae_anomalous": false
      },
      "combined": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 5.916820287704468,
        "simulation_time": 6.363817453384399,
        "lines_of_code": 55,
        "anomalous": false,
        "vae_anomalous": false
      }
    },
    {
      "circuit_id": 2,
      "circuit_name": "D Flip-Flop",
      "category": "Sequential",
      "complexity": "simple",
      "original_prompt": "Create a D flip-flop with clock, reset, input d, and output q. Include testbench with timing verification.",
      "model": "claude",
      "prompt_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 4.599787712097168,
        "simulation_time": 7.993998289108276,
        "lines_of_code": 60,
        "anomalous": false,
        "vae_anomalous": false
      },
      "mermaid_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 4.51139235496521,
        "simulation_time": 7.16679310798645,
        "lines_of_code": 57,
        "anomalous": false,
        "vae_anomalous": false
      },
      "combined": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 7.343403577804565,
        "simulation_time": 6.321819543838501,
        "lines_of_code": 80,
        "anomalous": false,
        "vae_anomalous": false
      }
    },
    {
      "circuit_id": 3,
      "circuit_name": "4-bit Counter",
      "category": "Sequential",
      "complexity": "simple",
      "original_prompt": "Design a 4-bit synchronous counter with clock, reset, enable, and count[3:0]. Include testbench.",
      "model": "claude",
      "prompt_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 4.561851739883423,
        "simulation_time": 6.696674346923828,
        "lines_of_code": 52,
        "anomalous": false,
        "vae_anomalous": false
      },
      "mermaid_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 5.9070916175842285,
        "simulation_time": 7.096284627914429,
        "lines_of_code": 66,
        "anomalous": false,
        "vae_anomalous": false
      },
      "combined": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 5.82893180847168,
        "simulation_time": 7.504217624664307,
        "lines_of_code": 64,
        "anomalous": false,
        "vae_anomalous": false
      }
    },
    {
      "circuit_id": 4,
      "circuit_name": "Full Adder",
      "category": "Combinational",
      "complexity": "simple",
      "original_prompt": "Create a full adder with inputs a, b, cin and outputs sum, cout. Include testbench with all 8 cases.",
      "model": "claude",
      "prompt_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 5.154020071029663,
        "simulation_time": 5.869534492492676,
        "lines_of_code": 49,
        "anomalous": false,
        "vae_anomalous": false
      },
      "mermaid_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 7.341974973678589,
        "simulation_time": 6.8160247802734375,
        "lines_of_code": 71,
        "anomalous": false,
        "vae_anomalous": false
      },
      "combined": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 6.499958276748657,
        "simulation_time": 7.254308223724365,
        "lines_of_code": 71,
        "anomalous": false,
        "vae_anomalous": false
      }
    },
    {
      "circuit_id": 5,
      "circuit_name": "2-bit Comparator",
      "category": "Combinational",
      "complexity": "simple",
      "original_prompt": "Design a 2-bit comparator with inputs a[1:0], b[1:0] and outputs eq, gt, lt. Include testbench.",
      "model": "claude",
      "prompt_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 5.010858535766602,
        "simulation_time": 7.338753700256348,
        "lines_of_code": 49,
        "anomalous": false,
        "vae_anomalous": false
      },
      "mermaid_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 5.343194484710693,
        "simulation_time": 7.213097333908081,
        "lines_of_code": 64,
        "anomalous": false,
        "vae_anomalous": false
      },
      "combined": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 7.790997505187988,
        "simulation_time": 6.501143217086792,
        "lines_of_code": 74,
        "anomalous": false,
        "vae_anomalous": false
      }
    },
    {
      "circuit_id": 6,
      "circuit_name": "4-bit ALU",
      "category": "Arithmetic",
      "complexity": "medium",
      "original_prompt": "Design a 4-bit ALU supporting ADD, SUB, AND, OR operations. Inputs: a[3:0], b[3:0], op[1:0]. Outputs: result[3:0], zero. Include testbench.",
      "model": "claude",
      "prompt_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 6.725280284881592,
        "simulation_time": 7.107929229736328,
        "lines_of_code": 70,
        "anomalous": false,
        "vae_anomalous": false
      },
      "mermaid_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 5.467853307723999,
        "simulation_time": 7.7559356689453125,
        "lines_of_code": 62,
        "anomalous": true,
        "vae_anomalous": false
      },
      "combined": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 6.2079432010650635,
        "simulation_time": 6.844831943511963,
        "lines_of_code": 74,
        "anomalous": false,
        "vae_anomalous": false
      }
    },
    {
      "circuit_id": 7,
      "circuit_name": "8:1 Multiplexer",
      "category": "Combinational",
      "complexity": "medium",
      "original_prompt": "Create an 8:1 multiplexer with input data[7:0], select sel[2:0], and output out. Include testbench.",
      "model": "claude",
      "prompt_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 5.719426870346069,
        "simulation_time": 7.123855829238892,
        "lines_of_code": 73,
        "anomalous": false,
        "vae_anomalous": false
      },
      "mermaid_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 6.948299169540405,
        "simulation_time": 7.3034281730651855,
        "lines_of_code": 74,
        "anomalous": false,
        "vae_anomalous": true
      },
      "combined": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 5.369698524475098,
        "simulation_time": 7.974548816680908,
        "lines_of_code": 74,
        "anomalous": false,
        "vae_anomalous": false
      }
    },
    {
      "circuit_id": 8,
      "circuit_name": "Sequence Detector",
      "category": "State Machine",
      "complexity": "medium",
      "original_prompt": "Design an FSM detecting pattern 1011 in serial input with overlapping detection. Include testbench with sequence: 10110111011.",
      "model": "claude",
      "prompt_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 8.115816831588745,
        "simulation_time": 6.700746059417725,
        "lines_of_code": 87,
        "anomalous": false,
        "vae_anomalous": false
      },
      "mermaid_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 7.992123365402222,
        "simulation_time": 6.9750471115112305,
        "lines_of_code": 87,
        "anomalous": false,
        "vae_anomalous": false
      },
      "combined": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 7.880987167358398,
        "simulation_time": 6.970568418502808,
        "lines_of_code": 83,
        "anomalous": false,
        "vae_anomalous": false
      }
    },
    {
      "circuit_id": 9,
      "circuit_name": "4-bit Shift Register",
      "category": "Sequential",
      "complexity": "medium",
      "original_prompt": "Create a 4-bit PISO shift register with clock, reset, load, parallel input[3:0], and serial output. Include testbench.",
      "model": "claude",
      "prompt_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 6.184987545013428,
        "simulation_time": 7.789293527603149,
        "lines_of_code": 69,
        "anomalous": false,
        "vae_anomalous": true
      },
      "mermaid_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 6.948146104812622,
        "simulation_time": 8.764627933502197,
        "lines_of_code": 68,
        "anomalous": true,
        "vae_anomalous": false
      },
      "combined": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 6.0039098262786865,
        "simulation_time": 8.055705070495605,
        "lines_of_code": 68,
        "anomalous": false,
        "vae_anomalous": false
      }
    },
    {
      "circuit_id": 10,
      "circuit_name": "Priority Encoder",
      "category": "Combinational",
      "complexity": "medium",
      "original_prompt": "Design a 4-to-2 priority encoder with input in[3:0], output out[1:0], and valid bit. Highest bit has priority. Include testbench.",
      "model": "claude",
      "prompt_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 5.923458576202393,
        "simulation_time": 7.077886581420898,
        "lines_of_code": 82,
        "anomalous": false,
        "vae_anomalous": false
      },
      "mermaid_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 5.870509624481201,
        "simulation_time": 8.26085376739502,
        "lines_of_code": 66,
        "anomalous": true,
        "vae_anomalous": false
      },
      "combined": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 5.26552414894104,
        "simulation_time": 7.2617347240448,
        "lines_of_code": 55,
        "anomalous": false,
        "vae_anomalous": false
      }
    },
    {
      "circuit_id": 11,
      "circuit_name": "Traffic Light Controller",
      "category": "State Machine",
      "complexity": "complex",
      "original_prompt": "Design a traffic light FSM with 4 states: NS_GREEN, NS_YELLOW, EW_GREEN, EW_YELLOW. Inputs: clk, rst, emergency. Outputs: ns_light[1:0], ew_light[1:0]. Timing: GREEN=8 cycles, YELLOW=2 cycles. Emergency makes both RED. Include testbench.",
      "model": "claude",
      "prompt_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 11.033982276916504,
        "simulation_time": 6.851847171783447,
        "lines_of_code": 127,
        "anomalous": false,
        "vae_anomalous": false
      },
      "mermaid_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 11.182909488677979,
        "simulation_time": 7.080461740493774,
        "lines_of_code": 121,
        "anomalous": false,
        "vae_anomalous": true
      },
      "combined": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 12.240810632705688,
        "simulation_time": 7.432344913482666,
        "lines_of_code": 141,
        "anomalous": false,
        "vae_anomalous": false
      }
    },
    {
      "circuit_id": 12,
      "circuit_name": "UART Transmitter",
      "category": "State Machine",
      "complexity": "complex",
      "original_prompt": "Design UART transmitter with states: IDLE, START, DATA, STOP. Protocol: START(0), 8 data bits LSB-first, STOP(1). Baud rate divider. Include testbench.",
      "model": "claude",
      "prompt_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 12.82007884979248,
        "simulation_time": 9.699707746505737,
        "lines_of_code": 136,
        "anomalous": false,
        "vae_anomalous": true
      },
      "mermaid_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 12.864751100540161,
        "simulation_time": 8.961135387420654,
        "lines_of_code": 127,
        "anomalous": false,
        "vae_anomalous": false
      },
      "combined": {
        "success": false,
        "compiled": false,
        "simulated": false,
        "has_waveform": false,
        "generation_time": 14.932197332382202,
        "simulation_time": 0.008922100067138672,
        "lines_of_code": 159,
        "anomalous": null,
        "vae_anomalous": null
      }
    },
    {
      "circuit_id": 13,
      "circuit_name": "8-bit Register File",
      "category": "CPU Component",
      "complexity": "complex",
      "original_prompt": "Create 8-register \u00d7 8-bit register file with dual read ports and single write port. Include testbench with simultaneous operations.",
      "model": "claude",
      "prompt_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 9.54496455192566,
        "simulation_time": 8.62882947921753,
        "lines_of_code": 87,
        "anomalous": true,
        "vae_anomalous": false
      },
      "mermaid_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 8.8258056640625,
        "simulation_time": 9.279621362686157,
        "lines_of_code": 84,
        "anomalous": true,
        "vae_anomalous": true
      },
      "combined": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 9.517876148223877,
        "simulation_time": 8.797276496887207,
        "lines_of_code": 88,
        "anomalous": true,
        "vae_anomalous": false
      }
    },
    {
      "circuit_id": 14,
      "circuit_name": "PWM Generator",
      "category": "Advanced Sequential",
      "complexity": "complex",
      "original_prompt": "Design 8-bit resolution PWM generator with configurable duty cycle. Include testbench with duty cycles: 0%, 25%, 50%, 75%, 100%.",
      "model": "claude",
      "prompt_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 6.511859178543091,
        "simulation_time": 7.212121963500977,
        "lines_of_code": 80,
        "anomalous": true,
        "vae_anomalous": false
      },
      "mermaid_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 6.531256914138794,
        "simulation_time": 8.508522033691406,
        "lines_of_code": 74,
        "anomalous": true,
        "vae_anomalous": false
      },
      "combined": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 6.694589853286743,
        "simulation_time": 8.535290002822876,
        "lines_of_code": 75,
        "anomalous": false,
        "vae_anomalous": false
      }
    },
    {
      "circuit_id": 15,
      "circuit_name": "SPI Master",
      "category": "Protocol",
      "complexity": "complex",
      "original_prompt": "Design SPI master supporting mode 0 (CPOL=0, CPHA=0). Include SCLK generation, MOSI/MISO handling. Include testbench.",
      "model": "claude",
      "prompt_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 12.454637050628662,
        "simulation_time": 9.958751916885376,
        "lines_of_code": 133,
        "anomalous": true,
        "vae_anomalous": false
      },
      "mermaid_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 12.986192464828491,
        "simulation_time": 8.028698205947876,
        "lines_of_code": 125,
        "anomalous": false,
        "vae_anomalous": true
      },
      "combined": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 13.168219566345215,
        "simulation_time": 7.993328094482422,
        "lines_of_code": 137,
        "anomalous": false,
        "vae_anomalous": false
      }
    },
    {
      "circuit_id": 16,
      "circuit_name": "3-to-8 Decoder",
      "category": "Combinational",
      "complexity": "simple",
      "original_prompt": "Design a 3-to-8 decoder with inputs a[2:0], enable en, and outputs y[7:0]. When enabled, only one output is high based on input. Include testbench testing all combinations.",
      "model": "claude",
      "prompt_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 5.866757869720459,
        "simulation_time": 8.858402013778687,
        "lines_of_code": 66,
        "anomalous": false,
        "vae_anomalous": false
      },
      "mermaid_only": {
        "success": false,
        "compiled": false,
        "simulated": false,
        "has_waveform": false,
        "generation_time": 7.396214008331299,
        "simulation_time": 0.014879226684570312,
        "lines_of_code": 67,
        "anomalous": null,
        "vae_anomalous": null
      },
      "combined": {
        "success": false,
        "compiled": false,
        "simulated": false,
        "has_waveform": false,
        "generation_time": 6.812861919403076,
        "simulation_time": 0.013534784317016602,
        "lines_of_code": 68,
        "anomalous": null,
        "vae_anomalous": null
      }
    },
    {
      "circuit_id": 17,
      "circuit_name": "JK Flip-Flop",
      "category": "Sequential",
      "complexity": "simple",
      "original_prompt": "Create a JK flip-flop with clock, reset, inputs j and k, and outputs q and q_bar. Include testbench verifying all four input combinations (00, 01, 10, 11).",
      "model": "claude",
      "prompt_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 6.8542160987854,
        "simulation_time": 7.724849224090576,
        "lines_of_code": 69,
        "anomalous": false,
        "vae_anomalous": false
      },
      "mermaid_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 6.675429582595825,
        "simulation_time": 7.900619268417358,
        "lines_of_code": 76,
        "anomalous": false,
        "vae_anomalous": false
      },
      "combined": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 6.943624019622803,
        "simulation_time": 8.188880443572998,
        "lines_of_code": 74,
        "anomalous": false,
        "vae_anomalous": false
      }
    },
    {
      "circuit_id": 18,
      "circuit_name": "8-bit SIPO Shift Register",
      "category": "Sequential",
      "complexity": "simple",
      "original_prompt": "Design an 8-bit Serial-In Parallel-Out (SIPO) shift register with clock, reset, serial input, and parallel output[7:0]. Include testbench shifting in pattern 10101100.",
      "model": "claude",
      "prompt_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 6.184716701507568,
        "simulation_time": 7.710617303848267,
        "lines_of_code": 63,
        "anomalous": false,
        "vae_anomalous": false
      },
      "mermaid_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 5.105262279510498,
        "simulation_time": 8.013181209564209,
        "lines_of_code": 61,
        "anomalous": false,
        "vae_anomalous": false
      },
      "combined": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 4.850419044494629,
        "simulation_time": 7.638920068740845,
        "lines_of_code": 59,
        "anomalous": false,
        "vae_anomalous": false
      }
    },
    {
      "circuit_id": 19,
      "circuit_name": "4-bit XOR Array",
      "category": "Combinational",
      "complexity": "simple",
      "original_prompt": "Create a 4-bit XOR gate array with inputs a[3:0], b[3:0], and output result[3:0] where each bit is result[i] = a[i] XOR b[i]. Include testbench.",
      "model": "claude",
      "prompt_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 4.3280134201049805,
        "simulation_time": 5.989526271820068,
        "lines_of_code": 40,
        "anomalous": false,
        "vae_anomalous": false
      },
      "mermaid_only": {
        "success": false,
        "compiled": false,
        "simulated": false,
        "has_waveform": false,
        "anomalous": null
      },
      "combined": {
        "success": false,
        "compiled": false,
        "simulated": false,
        "has_waveform": false,
        "anomalous": null
      }
    },
    {
      "circuit_id": 20,
      "circuit_name": "4-bit Magnitude Comparator",
      "category": "Combinational",
      "complexity": "simple",
      "original_prompt": "Design a 4-bit magnitude comparator with inputs a[3:0], b[3:0] and outputs equal, greater, less. Include testbench with boundary cases.",
      "model": "claude",
      "prompt_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 6.47180438041687,
        "simulation_time": 7.192977428436279,
        "lines_of_code": 69,
        "anomalous": false,
        "vae_anomalous": false
      },
      "mermaid_only": {
        "success": false,
        "compiled": false,
        "simulated": false,
        "has_waveform": false,
        "anomalous": null
      },
      "combined": {
        "success": false,
        "compiled": false,
        "simulated": false,
        "has_waveform": false,
        "anomalous": null
      }
    },
    {
      "circuit_id": 21,
      "circuit_name": "8-bit Barrel Shifter",
      "category": "Arithmetic",
      "complexity": "medium",
      "original_prompt": "Design an 8-bit barrel shifter supporting left shift, right shift, and rotate operations. Inputs: data[7:0], shift_amt[2:0], op[1:0] (00=LSL, 01=LSR, 10=ROL, 11=ROR). Output: result[7:0]. Include testbench.",
      "model": "claude",
      "prompt_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 6.365937232971191,
        "simulation_time": 6.339529991149902,
        "lines_of_code": 70,
        "anomalous": false,
        "vae_anomalous": false
      },
      "mermaid_only": {
        "success": false,
        "compiled": false,
        "simulated": false,
        "has_waveform": false,
        "generation_time": 8.431036233901978,
        "simulation_time": 0.011929512023925781,
        "lines_of_code": 83,
        "anomalous": null,
        "vae_anomalous": null
      },
      "combined": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 6.42150354385376,
        "simulation_time": 8.35959529876709,
        "lines_of_code": 70,
        "anomalous": true,
        "vae_anomalous": false
      }
    },
    {
      "circuit_id": 22,
      "circuit_name": "1-to-8 Demux",
      "category": "Combinational",
      "complexity": "medium",
      "original_prompt": "Create a 1-to-8 demultiplexer with input data_in, select sel[2:0], enable en, and outputs out[7:0]. When enabled, data_in routes to selected output. Include testbench.",
      "model": "claude",
      "prompt_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 7.716243028640747,
        "simulation_time": 7.941194295883179,
        "lines_of_code": 77,
        "anomalous": false,
        "vae_anomalous": false
      },
      "mermaid_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 6.051626682281494,
        "simulation_time": 8.813737392425537,
        "lines_of_code": 66,
        "anomalous": true,
        "vae_anomalous": false
      },
      "combined": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 6.708049297332764,
        "simulation_time": 7.7337939739227295,
        "lines_of_code": 79,
        "anomalous": false,
        "vae_anomalous": false
      }
    },
    {
      "circuit_id": 23,
      "circuit_name": "Mealy Sequence Detector",
      "category": "State Machine",
      "complexity": "medium",
      "original_prompt": "Design a Mealy FSM detecting sequence 101 in serial input with non-overlapping detection. Output high for one cycle when pattern detected. Include testbench with sequence: 1101011010.",
      "model": "claude",
      "prompt_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 8.030599594116211,
        "simulation_time": 7.876771926879883,
        "lines_of_code": 84,
        "anomalous": false,
        "vae_anomalous": true
      },
      "mermaid_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 8.414710760116577,
        "simulation_time": 8.42488694190979,
        "lines_of_code": 99,
        "anomalous": false,
        "vae_anomalous": false
      },
      "combined": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 7.232573986053467,
        "simulation_time": 7.01091456413269,
        "lines_of_code": 95,
        "anomalous": false,
        "vae_anomalous": false
      }
    },
    {
      "circuit_id": 24,
      "circuit_name": "8-bit Bidirectional Shift Register",
      "category": "Sequential",
      "complexity": "medium",
      "original_prompt": "Create an 8-bit bidirectional shift register with clock, reset, load, direction (1=right, 0=left), parallel input[7:0], serial_in_left, serial_in_right, and parallel output[7:0]. Include testbench.",
      "model": "claude",
      "prompt_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 7.993607521057129,
        "simulation_time": 9.019929647445679,
        "lines_of_code": 86,
        "anomalous": false,
        "vae_anomalous": false
      },
      "mermaid_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 7.7962493896484375,
        "simulation_time": 8.012680530548096,
        "lines_of_code": 82,
        "anomalous": false,
        "vae_anomalous": false
      },
      "combined": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 8.181977033615112,
        "simulation_time": 9.12796401977539,
        "lines_of_code": 89,
        "anomalous": false,
        "vae_anomalous": false
      }
    },
    {
      "circuit_id": 25,
      "circuit_name": "Binary to Gray Converter",
      "category": "Combinational",
      "complexity": "medium",
      "original_prompt": "Design a 4-bit binary to Gray code converter with input binary[3:0] and output gray[3:0]. Include testbench verifying all 16 conversions.",
      "model": "claude",
      "prompt_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 3.5064008235931396,
        "simulation_time": 6.881958723068237,
        "lines_of_code": 41,
        "anomalous": false,
        "vae_anomalous": false
      },
      "mermaid_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 5.248194456100464,
        "simulation_time": 7.043391704559326,
        "lines_of_code": 52,
        "anomalous": false,
        "vae_anomalous": false
      },
      "combined": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 5.562156915664673,
        "simulation_time": 6.6935646533966064,
        "lines_of_code": 57,
        "anomalous": false,
        "vae_anomalous": true
      }
    },
    {
      "circuit_id": 26,
      "circuit_name": "Vending Machine Controller",
      "category": "State Machine",
      "complexity": "complex",
      "original_prompt": "Design a vending machine FSM that accepts 5\u00a2 and 10\u00a2 coins until 15\u00a2 is reached, then dispenses item and returns change. Inputs: clk, rst, nickel, dime. Outputs: dispense, change[1:0] (in 5\u00a2 units). Include testbench with multiple purchase scenarios.",
      "model": "claude",
      "prompt_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 12.068035364151001,
        "simulation_time": 9.497631549835205,
        "lines_of_code": 135,
        "anomalous": true,
        "vae_anomalous": false
      },
      "mermaid_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 10.010611057281494,
        "simulation_time": 8.106257438659668,
        "lines_of_code": 112,
        "anomalous": false,
        "vae_anomalous": false
      },
      "combined": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 10.855690240859985,
        "simulation_time": 6.979557991027832,
        "lines_of_code": 120,
        "anomalous": false,
        "vae_anomalous": false
      }
    },
    {
      "circuit_id": 27,
      "circuit_name": "I2C Master Controller",
      "category": "Protocol",
      "complexity": "complex",
      "original_prompt": "Design an I2C master controller with start condition, stop condition, byte transmission, and ACK/NACK handling. Inputs: clk, rst, start, stop, data_in[7:0], wr_en. Outputs: scl, sda_out, sda_oe, busy, ack_received. Include testbench with write transaction.",
      "model": "claude",
      "prompt_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 15.39945387840271,
        "simulation_time": 9.450566291809082,
        "lines_of_code": 170,
        "anomalous": false,
        "vae_anomalous": false
      },
      "mermaid_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 14.06965970993042,
        "simulation_time": 7.7492616176605225,
        "lines_of_code": 140,
        "anomalous": false,
        "vae_anomalous": false
      },
      "combined": {
        "success": false,
        "compiled": false,
        "simulated": false,
        "has_waveform": false,
        "generation_time": 19.41117215156555,
        "simulation_time": 60.47841262817383,
        "lines_of_code": 186,
        "anomalous": null,
        "vae_anomalous": null
      }
    },
    {
      "circuit_id": 28,
      "circuit_name": "16x8 Dual-Port RAM",
      "category": "CPU Component",
      "complexity": "complex",
      "original_prompt": "Create a 16x8 dual-port RAM with independent read/write ports. Port A: clk_a, we_a, addr_a[3:0], din_a[7:0], dout_a[7:0]. Port B: clk_b, we_b, addr_b[3:0], din_b[7:0], dout_b[7:0]. Include testbench with simultaneous operations.",
      "model": "claude",
      "prompt_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 9.581323862075806,
        "simulation_time": 7.348413467407227,
        "lines_of_code": 92,
        "anomalous": false,
        "vae_anomalous": false
      },
      "mermaid_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 8.729409456253052,
        "simulation_time": 7.515305042266846,
        "lines_of_code": 86,
        "anomalous": false,
        "vae_anomalous": false
      },
      "combined": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 9.244458198547363,
        "simulation_time": 8.609124183654785,
        "lines_of_code": 96,
        "anomalous": false,
        "vae_anomalous": false
      }
    },
    {
      "circuit_id": 29,
      "circuit_name": "Programmable Frequency Divider",
      "category": "Advanced Sequential",
      "complexity": "complex",
      "original_prompt": "Design a programmable frequency divider with 8-bit division ratio. Inputs: clk, rst, divisor[7:0] (divides by 2 to 256). Output: clk_out. Generate 50% duty cycle output. Include testbench with divisor values: 2, 4, 8, 16.",
      "model": "claude",
      "prompt_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 5.514573574066162,
        "simulation_time": 8.415674924850464,
        "lines_of_code": 72,
        "anomalous": false,
        "vae_anomalous": true
      },
      "mermaid_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 6.057790040969849,
        "simulation_time": 8.032613039016724,
        "lines_of_code": 74,
        "anomalous": false,
        "vae_anomalous": true
      },
      "combined": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 7.157708168029785,
        "simulation_time": 8.288743734359741,
        "lines_of_code": 85,
        "anomalous": true,
        "vae_anomalous": false
      }
    },
    {
      "circuit_id": 30,
      "circuit_name": "UART Receiver",
      "category": "Protocol",
      "complexity": "complex",
      "original_prompt": "Design a UART receiver with states: IDLE, START, DATA, STOP. Protocol: detect START(0), receive 8 data bits LSB-first, verify STOP(1). Inputs: clk, rst, rx. Outputs: rx_data[7:0], rx_valid, frame_error. Baud rate divider. Include testbench.",
      "model": "claude",
      "prompt_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 13.14909291267395,
        "simulation_time": 0.06679844856262207,
        "lines_of_code": 141,
        "anomalous": false,
        "vae_anomalous": false
      },
      "mermaid_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 15.125614881515503,
        "simulation_time": 0.48568296432495117,
        "lines_of_code": 145,
        "anomalous": false,
        "vae_anomalous": false
      },
      "combined": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 17.013016939163208,
        "simulation_time": 0.2767515182495117,
        "lines_of_code": 181,
        "anomalous": false,
        "vae_anomalous": false
      }
    }
  ]
}