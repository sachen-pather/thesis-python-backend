{
  "metadata": {
    "test_date": "2025-10-26T07:49:29.313208",
    "total_circuits": 30,
    "model": "claude",
    "test_type": "three_way_multimodal"
  },
  "statistics": {
    "total_circuits": 30,
    "prompt_only": {
      "correct": 22,
      "total": 30,
      "percentage": 73.33333333333333
    },
    "mermaid_only": {
      "correct": 23,
      "total": 30,
      "percentage": 76.66666666666667
    },
    "combined": {
      "correct": 23,
      "total": 30,
      "percentage": 76.66666666666667
    }
  },
  "results": [
    {
      "circuit_id": 1,
      "circuit_name": "2-to-1 MUX",
      "category": "Combinational",
      "complexity": "simple",
      "original_prompt": "Design a 2-to-1 multiplexer with inputs a, b, select sel, and output out. Include testbench testing all combinations.",
      "model": "claude",
      "prompt_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 4.90838098526001,
        "simulation_time": 6.365575790405273,
        "lines_of_code": 51,
        "anomalous": false,
        "vae_anomalous": false
      },
      "mermaid_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 6.065265655517578,
        "simulation_time": 5.5642969608306885,
        "lines_of_code": 55,
        "anomalous": false,
        "vae_anomalous": false
      },
      "combined": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 5.943999767303467,
        "simulation_time": 6.6464924812316895,
        "lines_of_code": 59,
        "anomalous": false,
        "vae_anomalous": false
      }
    },
    {
      "circuit_id": 2,
      "circuit_name": "D Flip-Flop",
      "category": "Sequential",
      "complexity": "simple",
      "original_prompt": "Create a D flip-flop with clock, reset, input d, and output q. Include testbench with timing verification.",
      "model": "claude",
      "prompt_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 5.695342540740967,
        "simulation_time": 6.865159749984741,
        "lines_of_code": 54,
        "anomalous": true,
        "vae_anomalous": true
      },
      "mermaid_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 4.649131774902344,
        "simulation_time": 7.200653791427612,
        "lines_of_code": 57,
        "anomalous": false,
        "vae_anomalous": false
      },
      "combined": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 7.604812860488892,
        "simulation_time": 6.800040245056152,
        "lines_of_code": 82,
        "anomalous": false,
        "vae_anomalous": true
      }
    },
    {
      "circuit_id": 3,
      "circuit_name": "4-bit Counter",
      "category": "Sequential",
      "complexity": "simple",
      "original_prompt": "Design a 4-bit synchronous counter with clock, reset, enable, and count[3:0]. Include testbench.",
      "model": "claude",
      "prompt_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 4.532756805419922,
        "simulation_time": 7.401599645614624,
        "lines_of_code": 52,
        "anomalous": false,
        "vae_anomalous": false
      },
      "mermaid_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 6.534780979156494,
        "simulation_time": 7.721709728240967,
        "lines_of_code": 66,
        "anomalous": false,
        "vae_anomalous": true
      },
      "combined": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 6.4530205726623535,
        "simulation_time": 7.537158250808716,
        "lines_of_code": 67,
        "anomalous": false,
        "vae_anomalous": false
      }
    },
    {
      "circuit_id": 4,
      "circuit_name": "Full Adder",
      "category": "Combinational",
      "complexity": "simple",
      "original_prompt": "Create a full adder with inputs a, b, cin and outputs sum, cout. Include testbench with all 8 cases.",
      "model": "claude",
      "prompt_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 4.901195526123047,
        "simulation_time": 6.7938172817230225,
        "lines_of_code": 49,
        "anomalous": false,
        "vae_anomalous": false
      },
      "mermaid_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 7.902951955795288,
        "simulation_time": 6.4812116622924805,
        "lines_of_code": 79,
        "anomalous": false,
        "vae_anomalous": false
      },
      "combined": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 6.554300308227539,
        "simulation_time": 7.5312511920928955,
        "lines_of_code": 63,
        "anomalous": false,
        "vae_anomalous": false
      }
    },
    {
      "circuit_id": 5,
      "circuit_name": "2-bit Comparator",
      "category": "Combinational",
      "complexity": "simple",
      "original_prompt": "Design a 2-bit comparator with inputs a[1:0], b[1:0] and outputs eq, gt, lt. Include testbench.",
      "model": "claude",
      "prompt_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 7.788105726242065,
        "simulation_time": 7.244435787200928,
        "lines_of_code": 73,
        "anomalous": false,
        "vae_anomalous": false
      },
      "mermaid_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 5.315375566482544,
        "simulation_time": 7.061545372009277,
        "lines_of_code": 63,
        "anomalous": false,
        "vae_anomalous": false
      },
      "combined": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 7.658968687057495,
        "simulation_time": 6.225397825241089,
        "lines_of_code": 83,
        "anomalous": false,
        "vae_anomalous": false
      }
    },
    {
      "circuit_id": 6,
      "circuit_name": "4-bit ALU",
      "category": "Arithmetic",
      "complexity": "medium",
      "original_prompt": "Design a 4-bit ALU supporting ADD, SUB, AND, OR operations. Inputs: a[3:0], b[3:0], op[1:0]. Outputs: result[3:0], zero. Include testbench.",
      "model": "claude",
      "prompt_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 6.61108660697937,
        "simulation_time": 7.0024638175964355,
        "lines_of_code": 70,
        "anomalous": false,
        "vae_anomalous": false
      },
      "mermaid_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 5.439722061157227,
        "simulation_time": 6.148054838180542,
        "lines_of_code": 68,
        "anomalous": false,
        "vae_anomalous": true
      },
      "combined": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 6.1816394329071045,
        "simulation_time": 5.983032464981079,
        "lines_of_code": 74,
        "anomalous": false,
        "vae_anomalous": false
      }
    },
    {
      "circuit_id": 7,
      "circuit_name": "8:1 Multiplexer",
      "category": "Combinational",
      "complexity": "medium",
      "original_prompt": "Create an 8:1 multiplexer with input data[7:0], select sel[2:0], and output out. Include testbench.",
      "model": "claude",
      "prompt_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 6.257091522216797,
        "simulation_time": 7.681371688842773,
        "lines_of_code": 69,
        "anomalous": false,
        "vae_anomalous": false
      },
      "mermaid_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 5.702104091644287,
        "simulation_time": 6.593255043029785,
        "lines_of_code": 73,
        "anomalous": false,
        "vae_anomalous": false
      },
      "combined": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 5.664271831512451,
        "simulation_time": 6.603058576583862,
        "lines_of_code": 73,
        "anomalous": false,
        "vae_anomalous": false
      }
    },
    {
      "circuit_id": 8,
      "circuit_name": "Sequence Detector",
      "category": "State Machine",
      "complexity": "medium",
      "original_prompt": "Design an FSM detecting pattern 1011 in serial input with overlapping detection. Include testbench with sequence: 10110111011.",
      "model": "claude",
      "prompt_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 8.942364692687988,
        "simulation_time": 7.699239015579224,
        "lines_of_code": 86,
        "anomalous": false,
        "vae_anomalous": false
      },
      "mermaid_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 7.7036659717559814,
        "simulation_time": 6.872075796127319,
        "lines_of_code": 88,
        "anomalous": false,
        "vae_anomalous": false
      },
      "combined": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 8.12734317779541,
        "simulation_time": 7.2641441822052,
        "lines_of_code": 87,
        "anomalous": false,
        "vae_anomalous": false
      }
    },
    {
      "circuit_id": 9,
      "circuit_name": "4-bit Shift Register",
      "category": "Sequential",
      "complexity": "medium",
      "original_prompt": "Create a 4-bit PISO shift register with clock, reset, load, parallel input[3:0], and serial output. Include testbench.",
      "model": "claude",
      "prompt_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 6.489569664001465,
        "simulation_time": 7.207456588745117,
        "lines_of_code": 67,
        "anomalous": false,
        "vae_anomalous": false
      },
      "mermaid_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 7.597968101501465,
        "simulation_time": 7.337923049926758,
        "lines_of_code": 74,
        "anomalous": false,
        "vae_anomalous": false
      },
      "combined": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 6.457953929901123,
        "simulation_time": 7.452830791473389,
        "lines_of_code": 69,
        "anomalous": false,
        "vae_anomalous": false
      }
    },
    {
      "circuit_id": 10,
      "circuit_name": "Priority Encoder",
      "category": "Combinational",
      "complexity": "medium",
      "original_prompt": "Design a 4-to-2 priority encoder with input in[3:0], output out[1:0], and valid bit. Highest bit has priority. Include testbench.",
      "model": "claude",
      "prompt_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 5.622269153594971,
        "simulation_time": 7.360928773880005,
        "lines_of_code": 65,
        "anomalous": false,
        "vae_anomalous": false
      },
      "mermaid_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 6.845647811889648,
        "simulation_time": 7.665069580078125,
        "lines_of_code": 77,
        "anomalous": false,
        "vae_anomalous": true
      },
      "combined": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 5.88602614402771,
        "simulation_time": 6.19119930267334,
        "lines_of_code": 77,
        "anomalous": false,
        "vae_anomalous": false
      }
    },
    {
      "circuit_id": 11,
      "circuit_name": "Traffic Light Controller",
      "category": "State Machine",
      "complexity": "complex",
      "original_prompt": "Design a traffic light FSM with 4 states: NS_GREEN, NS_YELLOW, EW_GREEN, EW_YELLOW. Inputs: clk, rst, emergency. Outputs: ns_light[1:0], ew_light[1:0]. Timing: GREEN=8 cycles, YELLOW=2 cycles. Emergency makes both RED. Include testbench.",
      "model": "claude",
      "prompt_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 11.678049325942993,
        "simulation_time": 7.9781200885772705,
        "lines_of_code": 140,
        "anomalous": false,
        "vae_anomalous": true
      },
      "mermaid_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 10.705511093139648,
        "simulation_time": 7.56670618057251,
        "lines_of_code": 124,
        "anomalous": false,
        "vae_anomalous": true
      },
      "combined": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 10.813292980194092,
        "simulation_time": 7.3071935176849365,
        "lines_of_code": 119,
        "anomalous": false,
        "vae_anomalous": true
      }
    },
    {
      "circuit_id": 12,
      "circuit_name": "UART Transmitter",
      "category": "State Machine",
      "complexity": "complex",
      "original_prompt": "Design UART transmitter with states: IDLE, START, DATA, STOP. Protocol: START(0), 8 data bits LSB-first, STOP(1). Baud rate divider. Include testbench.",
      "model": "claude",
      "prompt_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 9.930179595947266,
        "simulation_time": 7.85294508934021,
        "lines_of_code": 112,
        "anomalous": false,
        "vae_anomalous": true
      },
      "mermaid_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 10.458375930786133,
        "simulation_time": 7.869524955749512,
        "lines_of_code": 117,
        "anomalous": false,
        "vae_anomalous": true
      },
      "combined": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 11.536056756973267,
        "simulation_time": 8.159960508346558,
        "lines_of_code": 112,
        "anomalous": false,
        "vae_anomalous": false
      }
    },
    {
      "circuit_id": 13,
      "circuit_name": "8-bit Register File",
      "category": "CPU Component",
      "complexity": "complex",
      "original_prompt": "Create 8-register \u00d7 8-bit register file with dual read ports and single write port. Include testbench with simultaneous operations.",
      "model": "claude",
      "prompt_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 9.432209968566895,
        "simulation_time": 9.137313604354858,
        "lines_of_code": 96,
        "anomalous": true,
        "vae_anomalous": false
      },
      "mermaid_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 8.773394584655762,
        "simulation_time": 8.843446493148804,
        "lines_of_code": 88,
        "anomalous": true,
        "vae_anomalous": false
      },
      "combined": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 9.025411367416382,
        "simulation_time": 8.73106336593628,
        "lines_of_code": 89,
        "anomalous": true,
        "vae_anomalous": false
      }
    },
    {
      "circuit_id": 14,
      "circuit_name": "PWM Generator",
      "category": "Advanced Sequential",
      "complexity": "complex",
      "original_prompt": "Design 8-bit resolution PWM generator with configurable duty cycle. Include testbench with duty cycles: 0%, 25%, 50%, 75%, 100%.",
      "model": "claude",
      "prompt_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 6.968597412109375,
        "simulation_time": 9.179523706436157,
        "lines_of_code": 79,
        "anomalous": true,
        "vae_anomalous": false
      },
      "mermaid_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 6.230300664901733,
        "simulation_time": 7.961556911468506,
        "lines_of_code": 75,
        "anomalous": false,
        "vae_anomalous": false
      },
      "combined": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 6.2547314167022705,
        "simulation_time": 8.707691192626953,
        "lines_of_code": 75,
        "anomalous": true,
        "vae_anomalous": false
      }
    },
    {
      "circuit_id": 15,
      "circuit_name": "SPI Master",
      "category": "Protocol",
      "complexity": "complex",
      "original_prompt": "Design SPI master supporting mode 0 (CPOL=0, CPHA=0). Include SCLK generation, MOSI/MISO handling. Include testbench.",
      "model": "claude",
      "prompt_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 13.338335514068604,
        "simulation_time": 10.397123336791992,
        "lines_of_code": 134,
        "anomalous": true,
        "vae_anomalous": false
      },
      "mermaid_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 12.237597465515137,
        "simulation_time": 8.131467580795288,
        "lines_of_code": 126,
        "anomalous": false,
        "vae_anomalous": false
      },
      "combined": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 14.862329006195068,
        "simulation_time": 7.561323404312134,
        "lines_of_code": 146,
        "anomalous": false,
        "vae_anomalous": true
      }
    },
    {
      "circuit_id": 16,
      "circuit_name": "3-to-8 Decoder",
      "category": "Combinational",
      "complexity": "simple",
      "original_prompt": "Design a 3-to-8 decoder with inputs a[2:0], enable en, and outputs y[7:0]. When enabled, only one output is high based on input. Include testbench testing all combinations.",
      "model": "claude",
      "prompt_only": {
        "success": false,
        "compiled": false,
        "simulated": false,
        "has_waveform": false,
        "generation_time": 5.43035888671875,
        "simulation_time": 66.77561855316162,
        "lines_of_code": 61,
        "anomalous": null,
        "vae_anomalous": null
      },
      "mermaid_only": {
        "success": false,
        "compiled": false,
        "simulated": false,
        "has_waveform": false,
        "generation_time": 7.155305862426758,
        "simulation_time": 8.618547677993774,
        "lines_of_code": 61,
        "anomalous": null,
        "vae_anomalous": null
      },
      "combined": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 7.792664289474487,
        "simulation_time": 7.614804267883301,
        "lines_of_code": 71,
        "anomalous": false,
        "vae_anomalous": false
      }
    },
    {
      "circuit_id": 17,
      "circuit_name": "JK Flip-Flop",
      "category": "Sequential",
      "complexity": "simple",
      "original_prompt": "Create a JK flip-flop with clock, reset, inputs j and k, and outputs q and q_bar. Include testbench verifying all four input combinations (00, 01, 10, 11).",
      "model": "claude",
      "prompt_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 7.693183660507202,
        "simulation_time": 8.176666975021362,
        "lines_of_code": 68,
        "anomalous": false,
        "vae_anomalous": false
      },
      "mermaid_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 6.759650468826294,
        "simulation_time": 6.892154216766357,
        "lines_of_code": 74,
        "anomalous": false,
        "vae_anomalous": false
      },
      "combined": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 6.849055767059326,
        "simulation_time": 7.088849306106567,
        "lines_of_code": 76,
        "anomalous": false,
        "vae_anomalous": false
      }
    },
    {
      "circuit_id": 18,
      "circuit_name": "8-bit SIPO Shift Register",
      "category": "Sequential",
      "complexity": "simple",
      "original_prompt": "Design an 8-bit Serial-In Parallel-Out (SIPO) shift register with clock, reset, serial input, and parallel output[7:0]. Include testbench shifting in pattern 10101100.",
      "model": "claude",
      "prompt_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 6.026083707809448,
        "simulation_time": 7.72398042678833,
        "lines_of_code": 63,
        "anomalous": false,
        "vae_anomalous": false
      },
      "mermaid_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 5.176705837249756,
        "simulation_time": 7.874772787094116,
        "lines_of_code": 61,
        "anomalous": false,
        "vae_anomalous": false
      },
      "combined": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 5.957205057144165,
        "simulation_time": 7.304485082626343,
        "lines_of_code": 67,
        "anomalous": false,
        "vae_anomalous": false
      }
    },
    {
      "circuit_id": 19,
      "circuit_name": "4-bit XOR Array",
      "category": "Combinational",
      "complexity": "simple",
      "original_prompt": "Create a 4-bit XOR gate array with inputs a[3:0], b[3:0], and output result[3:0] where each bit is result[i] = a[i] XOR b[i]. Include testbench.",
      "model": "claude",
      "prompt_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 5.252651691436768,
        "simulation_time": 8.552337884902954,
        "lines_of_code": 40,
        "anomalous": false,
        "vae_anomalous": false
      },
      "mermaid_only": {
        "success": false,
        "compiled": false,
        "simulated": false,
        "has_waveform": false,
        "anomalous": null
      },
      "combined": {
        "success": false,
        "compiled": false,
        "simulated": false,
        "has_waveform": false,
        "anomalous": null
      }
    },
    {
      "circuit_id": 20,
      "circuit_name": "4-bit Magnitude Comparator",
      "category": "Combinational",
      "complexity": "simple",
      "original_prompt": "Design a 4-bit magnitude comparator with inputs a[3:0], b[3:0] and outputs equal, greater, less. Include testbench with boundary cases.",
      "model": "claude",
      "prompt_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 5.7945168018341064,
        "simulation_time": 7.953456401824951,
        "lines_of_code": 58,
        "anomalous": false,
        "vae_anomalous": false
      },
      "mermaid_only": {
        "success": false,
        "compiled": false,
        "simulated": false,
        "has_waveform": false,
        "anomalous": null
      },
      "combined": {
        "success": false,
        "compiled": false,
        "simulated": false,
        "has_waveform": false,
        "anomalous": null
      }
    },
    {
      "circuit_id": 21,
      "circuit_name": "8-bit Barrel Shifter",
      "category": "Arithmetic",
      "complexity": "medium",
      "original_prompt": "Design an 8-bit barrel shifter supporting left shift, right shift, and rotate operations. Inputs: data[7:0], shift_amt[2:0], op[1:0] (00=LSL, 01=LSR, 10=ROL, 11=ROR). Output: result[7:0]. Include testbench.",
      "model": "claude",
      "prompt_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 6.383258819580078,
        "simulation_time": 8.39714765548706,
        "lines_of_code": 70,
        "anomalous": true,
        "vae_anomalous": false
      },
      "mermaid_only": {
        "success": false,
        "compiled": false,
        "simulated": false,
        "has_waveform": false,
        "generation_time": 8.015320777893066,
        "simulation_time": 0.014482975006103516,
        "lines_of_code": 76,
        "anomalous": null,
        "vae_anomalous": null
      },
      "combined": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 6.362467527389526,
        "simulation_time": 9.488559246063232,
        "lines_of_code": 70,
        "anomalous": true,
        "vae_anomalous": false
      }
    },
    {
      "circuit_id": 22,
      "circuit_name": "1-to-8 Demux",
      "category": "Combinational",
      "complexity": "medium",
      "original_prompt": "Create a 1-to-8 demultiplexer with input data_in, select sel[2:0], enable en, and outputs out[7:0]. When enabled, data_in routes to selected output. Include testbench.",
      "model": "claude",
      "prompt_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 6.888712644577026,
        "simulation_time": 8.505261659622192,
        "lines_of_code": 66,
        "anomalous": false,
        "vae_anomalous": false
      },
      "mermaid_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 5.687180280685425,
        "simulation_time": 9.216249704360962,
        "lines_of_code": 62,
        "anomalous": true,
        "vae_anomalous": false
      },
      "combined": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 6.2151970863342285,
        "simulation_time": 8.97674560546875,
        "lines_of_code": 66,
        "anomalous": true,
        "vae_anomalous": false
      }
    },
    {
      "circuit_id": 23,
      "circuit_name": "Mealy Sequence Detector",
      "category": "State Machine",
      "complexity": "medium",
      "original_prompt": "Design a Mealy FSM detecting sequence 101 in serial input with non-overlapping detection. Output high for one cycle when pattern detected. Include testbench with sequence: 1101011010.",
      "model": "claude",
      "prompt_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 8.169612884521484,
        "simulation_time": 7.575704574584961,
        "lines_of_code": 97,
        "anomalous": false,
        "vae_anomalous": true
      },
      "mermaid_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 8.316756963729858,
        "simulation_time": 8.107681512832642,
        "lines_of_code": 112,
        "anomalous": false,
        "vae_anomalous": false
      },
      "combined": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 7.188370943069458,
        "simulation_time": 7.546242952346802,
        "lines_of_code": 94,
        "anomalous": false,
        "vae_anomalous": false
      }
    },
    {
      "circuit_id": 24,
      "circuit_name": "8-bit Bidirectional Shift Register",
      "category": "Sequential",
      "complexity": "medium",
      "original_prompt": "Create an 8-bit bidirectional shift register with clock, reset, load, direction (1=right, 0=left), parallel input[7:0], serial_in_left, serial_in_right, and parallel output[7:0]. Include testbench.",
      "model": "claude",
      "prompt_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 8.905413150787354,
        "simulation_time": 8.628610134124756,
        "lines_of_code": 95,
        "anomalous": false,
        "vae_anomalous": false
      },
      "mermaid_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 8.165451049804688,
        "simulation_time": 8.447155237197876,
        "lines_of_code": 85,
        "anomalous": false,
        "vae_anomalous": false
      },
      "combined": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 8.409911870956421,
        "simulation_time": 8.430672883987427,
        "lines_of_code": 89,
        "anomalous": false,
        "vae_anomalous": false
      }
    },
    {
      "circuit_id": 25,
      "circuit_name": "Binary to Gray Converter",
      "category": "Combinational",
      "complexity": "medium",
      "original_prompt": "Design a 4-bit binary to Gray code converter with input binary[3:0] and output gray[3:0]. Include testbench verifying all 16 conversions.",
      "model": "claude",
      "prompt_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 3.7893898487091064,
        "simulation_time": 6.920586824417114,
        "lines_of_code": 39,
        "anomalous": false,
        "vae_anomalous": true
      },
      "mermaid_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 5.675023794174194,
        "simulation_time": 6.825095176696777,
        "lines_of_code": 51,
        "anomalous": false,
        "vae_anomalous": false
      },
      "combined": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 3.616424322128296,
        "simulation_time": 7.95499062538147,
        "lines_of_code": 41,
        "anomalous": false,
        "vae_anomalous": false
      }
    },
    {
      "circuit_id": 26,
      "circuit_name": "Vending Machine Controller",
      "category": "State Machine",
      "complexity": "complex",
      "original_prompt": "Design a vending machine FSM that accepts 5\u00a2 and 10\u00a2 coins until 15\u00a2 is reached, then dispenses item and returns change. Inputs: clk, rst, nickel, dime. Outputs: dispense, change[1:0] (in 5\u00a2 units). Include testbench with multiple purchase scenarios.",
      "model": "claude",
      "prompt_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 13.443251848220825,
        "simulation_time": 8.83083438873291,
        "lines_of_code": 152,
        "anomalous": true,
        "vae_anomalous": false
      },
      "mermaid_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 9.9492506980896,
        "simulation_time": 6.83440375328064,
        "lines_of_code": 115,
        "anomalous": false,
        "vae_anomalous": false
      },
      "combined": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 10.906832218170166,
        "simulation_time": 7.399589538574219,
        "lines_of_code": 118,
        "anomalous": false,
        "vae_anomalous": false
      }
    },
    {
      "circuit_id": 27,
      "circuit_name": "I2C Master Controller",
      "category": "Protocol",
      "complexity": "complex",
      "original_prompt": "Design an I2C master controller with start condition, stop condition, byte transmission, and ACK/NACK handling. Inputs: clk, rst, start, stop, data_in[7:0], wr_en. Outputs: scl, sda_out, sda_oe, busy, ack_received. Include testbench with write transaction.",
      "model": "claude",
      "prompt_only": {
        "success": false,
        "compiled": false,
        "simulated": false,
        "has_waveform": false,
        "generation_time": 14.284219980239868,
        "simulation_time": 60.18453812599182,
        "lines_of_code": 158,
        "anomalous": null,
        "vae_anomalous": null
      },
      "mermaid_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 14.18396282196045,
        "simulation_time": 8.46047854423523,
        "lines_of_code": 140,
        "anomalous": false,
        "vae_anomalous": false
      },
      "combined": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 19.718827724456787,
        "simulation_time": 8.755933046340942,
        "lines_of_code": 177,
        "anomalous": false,
        "vae_anomalous": false
      }
    },
    {
      "circuit_id": 28,
      "circuit_name": "16x8 Dual-Port RAM",
      "category": "CPU Component",
      "complexity": "complex",
      "original_prompt": "Create a 16x8 dual-port RAM with independent read/write ports. Port A: clk_a, we_a, addr_a[3:0], din_a[7:0], dout_a[7:0]. Port B: clk_b, we_b, addr_b[3:0], din_b[7:0], dout_b[7:0]. Include testbench with simultaneous operations.",
      "model": "claude",
      "prompt_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 10.465477466583252,
        "simulation_time": 7.600163459777832,
        "lines_of_code": 101,
        "anomalous": false,
        "vae_anomalous": false
      },
      "mermaid_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 9.084003686904907,
        "simulation_time": 8.697137117385864,
        "lines_of_code": 89,
        "anomalous": true,
        "vae_anomalous": false
      },
      "combined": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 10.10800313949585,
        "simulation_time": 8.377543449401855,
        "lines_of_code": 104,
        "anomalous": false,
        "vae_anomalous": false
      }
    },
    {
      "circuit_id": 29,
      "circuit_name": "Programmable Frequency Divider",
      "category": "Advanced Sequential",
      "complexity": "complex",
      "original_prompt": "Design a programmable frequency divider with 8-bit division ratio. Inputs: clk, rst, divisor[7:0] (divides by 2 to 256). Output: clk_out. Generate 50% duty cycle output. Include testbench with divisor values: 2, 4, 8, 16.",
      "model": "claude",
      "prompt_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 5.453188419342041,
        "simulation_time": 7.768638372421265,
        "lines_of_code": 72,
        "anomalous": false,
        "vae_anomalous": true
      },
      "mermaid_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 6.710785865783691,
        "simulation_time": 8.034574270248413,
        "lines_of_code": 82,
        "anomalous": false,
        "vae_anomalous": true
      },
      "combined": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 7.021124362945557,
        "simulation_time": 8.013275861740112,
        "lines_of_code": 84,
        "anomalous": false,
        "vae_anomalous": false
      }
    },
    {
      "circuit_id": 30,
      "circuit_name": "UART Receiver",
      "category": "Protocol",
      "complexity": "complex",
      "original_prompt": "Design a UART receiver with states: IDLE, START, DATA, STOP. Protocol: detect START(0), receive 8 data bits LSB-first, verify STOP(1). Inputs: clk, rst, rx. Outputs: rx_data[7:0], rx_valid, frame_error. Baud rate divider. Include testbench.",
      "model": "claude",
      "prompt_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 12.118642807006836,
        "simulation_time": 0.14722919464111328,
        "lines_of_code": 123,
        "anomalous": false,
        "vae_anomalous": true
      },
      "mermaid_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 15.3563871383667,
        "simulation_time": 0.5910685062408447,
        "lines_of_code": 155,
        "anomalous": false,
        "vae_anomalous": false
      },
      "combined": {
        "success": false,
        "compiled": false,
        "simulated": false,
        "has_waveform": false,
        "generation_time": 14.204110145568848,
        "simulation_time": 0.01134634017944336,
        "lines_of_code": 151,
        "anomalous": null,
        "vae_anomalous": null
      }
    }
  ]
}