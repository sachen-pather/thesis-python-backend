{
  "metadata": {
    "test_date": "2025-10-26T07:25:30.852356",
    "total_circuits": 30,
    "model": "gpt-4o",
    "test_type": "three_way_multimodal"
  },
  "statistics": {
    "total_circuits": 30,
    "prompt_only": {
      "correct": 7,
      "total": 30,
      "percentage": 23.333333333333332
    },
    "mermaid_only": {
      "correct": 5,
      "total": 30,
      "percentage": 16.666666666666664
    },
    "combined": {
      "correct": 3,
      "total": 30,
      "percentage": 10.0
    }
  },
  "results": [
    {
      "circuit_id": 1,
      "circuit_name": "2-to-1 MUX",
      "category": "Combinational",
      "complexity": "simple",
      "original_prompt": "Design a 2-to-1 multiplexer with inputs a, b, select sel, and output out. Include testbench testing all combinations.",
      "model": "gpt-4o",
      "prompt_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 3.80043363571167,
        "simulation_time": 12.065212726593018,
        "lines_of_code": 44,
        "anomalous": true,
        "vae_anomalous": false
      },
      "mermaid_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 4.832825183868408,
        "simulation_time": 9.297367095947266,
        "lines_of_code": 70,
        "anomalous": true,
        "vae_anomalous": false
      },
      "combined": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 4.217703819274902,
        "simulation_time": 6.3668742179870605,
        "lines_of_code": 73,
        "anomalous": true,
        "vae_anomalous": false
      }
    },
    {
      "circuit_id": 2,
      "circuit_name": "D Flip-Flop",
      "category": "Sequential",
      "complexity": "simple",
      "original_prompt": "Create a D flip-flop with clock, reset, input d, and output q. Include testbench with timing verification.",
      "model": "gpt-4o",
      "prompt_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 2.7700111865997314,
        "simulation_time": 10.48203158378601,
        "lines_of_code": 53,
        "anomalous": false,
        "vae_anomalous": true
      },
      "mermaid_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 3.8846700191497803,
        "simulation_time": 9.81631350517273,
        "lines_of_code": 52,
        "anomalous": true,
        "vae_anomalous": false
      },
      "combined": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 4.862870931625366,
        "simulation_time": 10.250951290130615,
        "lines_of_code": 53,
        "anomalous": true,
        "vae_anomalous": true
      }
    },
    {
      "circuit_id": 3,
      "circuit_name": "4-bit Counter",
      "category": "Sequential",
      "complexity": "simple",
      "original_prompt": "Design a 4-bit synchronous counter with clock, reset, enable, and count[3:0]. Include testbench.",
      "model": "gpt-4o",
      "prompt_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 3.020284652709961,
        "simulation_time": 10.403341054916382,
        "lines_of_code": 52,
        "anomalous": true,
        "vae_anomalous": false
      },
      "mermaid_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 6.470567464828491,
        "simulation_time": 10.514285802841187,
        "lines_of_code": 92,
        "anomalous": true,
        "vae_anomalous": false
      },
      "combined": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 2.6594834327697754,
        "simulation_time": 6.282639503479004,
        "lines_of_code": 53,
        "anomalous": true,
        "vae_anomalous": false
      }
    },
    {
      "circuit_id": 4,
      "circuit_name": "Full Adder",
      "category": "Combinational",
      "complexity": "simple",
      "original_prompt": "Create a full adder with inputs a, b, cin and outputs sum, cout. Include testbench with all 8 cases.",
      "model": "gpt-4o",
      "prompt_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 2.643496513366699,
        "simulation_time": 12.005879402160645,
        "lines_of_code": 48,
        "anomalous": true,
        "vae_anomalous": false
      },
      "mermaid_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 6.697087049484253,
        "simulation_time": 12.879446506500244,
        "lines_of_code": 75,
        "anomalous": false,
        "vae_anomalous": true
      },
      "combined": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 5.753842830657959,
        "simulation_time": 9.875583171844482,
        "lines_of_code": 66,
        "anomalous": false,
        "vae_anomalous": true
      }
    },
    {
      "circuit_id": 5,
      "circuit_name": "2-bit Comparator",
      "category": "Combinational",
      "complexity": "simple",
      "original_prompt": "Design a 2-bit comparator with inputs a[1:0], b[1:0] and outputs eq, gt, lt. Include testbench.",
      "model": "gpt-4o",
      "prompt_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 4.257988929748535,
        "simulation_time": 10.027785062789917,
        "lines_of_code": 58,
        "anomalous": true,
        "vae_anomalous": false
      },
      "mermaid_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 3.7259089946746826,
        "simulation_time": 13.389194011688232,
        "lines_of_code": 55,
        "anomalous": true,
        "vae_anomalous": false
      },
      "combined": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 7.224496841430664,
        "simulation_time": 6.006947994232178,
        "lines_of_code": 50,
        "anomalous": true,
        "vae_anomalous": false
      }
    },
    {
      "circuit_id": 6,
      "circuit_name": "4-bit ALU",
      "category": "Arithmetic",
      "complexity": "medium",
      "original_prompt": "Design a 4-bit ALU supporting ADD, SUB, AND, OR operations. Inputs: a[3:0], b[3:0], op[1:0]. Outputs: result[3:0], zero. Include testbench.",
      "model": "gpt-4o",
      "prompt_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 3.075275182723999,
        "simulation_time": 9.070911407470703,
        "lines_of_code": 55,
        "anomalous": true,
        "vae_anomalous": false
      },
      "mermaid_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 2.665374994277954,
        "simulation_time": 16.540262460708618,
        "lines_of_code": 57,
        "anomalous": true,
        "vae_anomalous": true
      },
      "combined": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 4.70660138130188,
        "simulation_time": 8.862721920013428,
        "lines_of_code": 65,
        "anomalous": true,
        "vae_anomalous": true
      }
    },
    {
      "circuit_id": 7,
      "circuit_name": "8:1 Multiplexer",
      "category": "Combinational",
      "complexity": "medium",
      "original_prompt": "Create an 8:1 multiplexer with input data[7:0], select sel[2:0], and output out. Include testbench.",
      "model": "gpt-4o",
      "prompt_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 2.275855541229248,
        "simulation_time": 7.065630674362183,
        "lines_of_code": 56,
        "anomalous": false,
        "vae_anomalous": false
      },
      "mermaid_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 3.032512664794922,
        "simulation_time": 8.082398653030396,
        "lines_of_code": 56,
        "anomalous": true,
        "vae_anomalous": false
      },
      "combined": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 3.1967248916625977,
        "simulation_time": 5.2630438804626465,
        "lines_of_code": 56,
        "anomalous": true,
        "vae_anomalous": true
      }
    },
    {
      "circuit_id": 8,
      "circuit_name": "Sequence Detector",
      "category": "State Machine",
      "complexity": "medium",
      "original_prompt": "Design an FSM detecting pattern 1011 in serial input with overlapping detection. Include testbench with sequence: 10110111011.",
      "model": "gpt-4o",
      "prompt_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 8.916152477264404,
        "simulation_time": 11.48028826713562,
        "lines_of_code": 103,
        "anomalous": true,
        "vae_anomalous": true
      },
      "mermaid_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 5.869317531585693,
        "simulation_time": 7.586894989013672,
        "lines_of_code": 90,
        "anomalous": false,
        "vae_anomalous": true
      },
      "combined": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 7.257754564285278,
        "simulation_time": 9.150376081466675,
        "lines_of_code": 105,
        "anomalous": true,
        "vae_anomalous": true
      }
    },
    {
      "circuit_id": 9,
      "circuit_name": "4-bit Shift Register",
      "category": "Sequential",
      "complexity": "medium",
      "original_prompt": "Create a 4-bit PISO shift register with clock, reset, load, parallel input[3:0], and serial output. Include testbench.",
      "model": "gpt-4o",
      "prompt_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 2.630689859390259,
        "simulation_time": 4.955965518951416,
        "lines_of_code": 67,
        "anomalous": false,
        "vae_anomalous": true
      },
      "mermaid_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 5.702355623245239,
        "simulation_time": 7.233054876327515,
        "lines_of_code": 67,
        "anomalous": true,
        "vae_anomalous": true
      },
      "combined": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 4.459211349487305,
        "simulation_time": 8.387808799743652,
        "lines_of_code": 68,
        "anomalous": true,
        "vae_anomalous": true
      }
    },
    {
      "circuit_id": 10,
      "circuit_name": "Priority Encoder",
      "category": "Combinational",
      "complexity": "medium",
      "original_prompt": "Design a 4-to-2 priority encoder with input in[3:0], output out[1:0], and valid bit. Highest bit has priority. Include testbench.",
      "model": "gpt-4o",
      "prompt_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 4.817251920700073,
        "simulation_time": 10.924665451049805,
        "lines_of_code": 59,
        "anomalous": true,
        "vae_anomalous": false
      },
      "mermaid_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 2.627279281616211,
        "simulation_time": 10.97702670097351,
        "lines_of_code": 65,
        "anomalous": true,
        "vae_anomalous": false
      },
      "combined": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 6.027430295944214,
        "simulation_time": 8.78696870803833,
        "lines_of_code": 66,
        "anomalous": true,
        "vae_anomalous": false
      }
    },
    {
      "circuit_id": 11,
      "circuit_name": "Traffic Light Controller",
      "category": "State Machine",
      "complexity": "complex",
      "original_prompt": "Design a traffic light FSM with 4 states: NS_GREEN, NS_YELLOW, EW_GREEN, EW_YELLOW. Inputs: clk, rst, emergency. Outputs: ns_light[1:0], ew_light[1:0]. Timing: GREEN=8 cycles, YELLOW=2 cycles. Emergency makes both RED. Include testbench.",
      "model": "gpt-4o",
      "prompt_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 6.662364482879639,
        "simulation_time": 12.656544923782349,
        "lines_of_code": 100,
        "anomalous": true,
        "vae_anomalous": true
      },
      "mermaid_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 6.7529401779174805,
        "simulation_time": 8.03836178779602,
        "lines_of_code": 105,
        "anomalous": true,
        "vae_anomalous": true
      },
      "combined": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 8.737817287445068,
        "simulation_time": 5.28949761390686,
        "lines_of_code": 138,
        "anomalous": true,
        "vae_anomalous": true
      }
    },
    {
      "circuit_id": 12,
      "circuit_name": "UART Transmitter",
      "category": "State Machine",
      "complexity": "complex",
      "original_prompt": "Design UART transmitter with states: IDLE, START, DATA, STOP. Protocol: START(0), 8 data bits LSB-first, STOP(1). Baud rate divider. Include testbench.",
      "model": "gpt-4o",
      "prompt_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 10.24294924736023,
        "simulation_time": 12.77958631515503,
        "lines_of_code": 117,
        "anomalous": true,
        "vae_anomalous": true
      },
      "mermaid_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 10.60323977470398,
        "simulation_time": 11.248987913131714,
        "lines_of_code": 189,
        "anomalous": true,
        "vae_anomalous": false
      },
      "combined": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 10.901769161224365,
        "simulation_time": 9.93629789352417,
        "lines_of_code": 120,
        "anomalous": true,
        "vae_anomalous": true
      }
    },
    {
      "circuit_id": 13,
      "circuit_name": "8-bit Register File",
      "category": "CPU Component",
      "complexity": "complex",
      "original_prompt": "Create 8-register \u00d7 8-bit register file with dual read ports and single write port. Include testbench with simultaneous operations.",
      "model": "gpt-4o",
      "prompt_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 7.00835657119751,
        "simulation_time": 9.180433988571167,
        "lines_of_code": 82,
        "anomalous": true,
        "vae_anomalous": true
      },
      "mermaid_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 8.909706115722656,
        "simulation_time": 9.619900703430176,
        "lines_of_code": 82,
        "anomalous": false,
        "vae_anomalous": false
      },
      "combined": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 7.309150218963623,
        "simulation_time": 7.914541721343994,
        "lines_of_code": 84,
        "anomalous": false,
        "vae_anomalous": true
      }
    },
    {
      "circuit_id": 14,
      "circuit_name": "PWM Generator",
      "category": "Advanced Sequential",
      "complexity": "complex",
      "original_prompt": "Design 8-bit resolution PWM generator with configurable duty cycle. Include testbench with duty cycles: 0%, 25%, 50%, 75%, 100%.",
      "model": "gpt-4o",
      "prompt_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 3.031397581100464,
        "simulation_time": 6.50940465927124,
        "lines_of_code": 65,
        "anomalous": true,
        "vae_anomalous": false
      },
      "mermaid_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 4.588632822036743,
        "simulation_time": 6.9149322509765625,
        "lines_of_code": 87,
        "anomalous": true,
        "vae_anomalous": true
      },
      "combined": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 3.316162347793579,
        "simulation_time": 6.801984548568726,
        "lines_of_code": 63,
        "anomalous": true,
        "vae_anomalous": false
      }
    },
    {
      "circuit_id": 15,
      "circuit_name": "SPI Master",
      "category": "Protocol",
      "complexity": "complex",
      "original_prompt": "Design SPI master supporting mode 0 (CPOL=0, CPHA=0). Include SCLK generation, MOSI/MISO handling. Include testbench.",
      "model": "gpt-4o",
      "prompt_only": {
        "success": false,
        "compiled": false,
        "simulated": false,
        "has_waveform": false,
        "generation_time": 8.858615636825562,
        "simulation_time": 0.011662006378173828,
        "lines_of_code": 107,
        "anomalous": null,
        "vae_anomalous": null
      },
      "mermaid_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 19.873037338256836,
        "simulation_time": 6.311855792999268,
        "lines_of_code": 176,
        "anomalous": true,
        "vae_anomalous": true
      },
      "combined": {
        "success": false,
        "compiled": false,
        "simulated": false,
        "has_waveform": false,
        "generation_time": 23.88196301460266,
        "simulation_time": 0.010971307754516602,
        "lines_of_code": 170,
        "anomalous": null,
        "vae_anomalous": null
      }
    },
    {
      "circuit_id": 16,
      "circuit_name": "3-to-8 Decoder",
      "category": "Combinational",
      "complexity": "simple",
      "original_prompt": "Design a 3-to-8 decoder with inputs a[2:0], enable en, and outputs y[7:0]. When enabled, only one output is high based on input. Include testbench testing all combinations.",
      "model": "gpt-4o",
      "prompt_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 5.3529372215271,
        "simulation_time": 9.875150442123413,
        "lines_of_code": 68,
        "anomalous": true,
        "vae_anomalous": false
      },
      "mermaid_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 3.1703755855560303,
        "simulation_time": 7.0771262645721436,
        "lines_of_code": 60,
        "anomalous": true,
        "vae_anomalous": false
      },
      "combined": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 4.707321882247925,
        "simulation_time": 7.061795473098755,
        "lines_of_code": 61,
        "anomalous": true,
        "vae_anomalous": false
      }
    },
    {
      "circuit_id": 17,
      "circuit_name": "JK Flip-Flop",
      "category": "Sequential",
      "complexity": "simple",
      "original_prompt": "Create a JK flip-flop with clock, reset, inputs j and k, and outputs q and q_bar. Include testbench verifying all four input combinations (00, 01, 10, 11).",
      "model": "gpt-4o",
      "prompt_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 4.808499336242676,
        "simulation_time": 7.43385648727417,
        "lines_of_code": 69,
        "anomalous": false,
        "vae_anomalous": true
      },
      "mermaid_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 6.334043741226196,
        "simulation_time": 9.848968267440796,
        "lines_of_code": 90,
        "anomalous": true,
        "vae_anomalous": true
      },
      "combined": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 4.752368211746216,
        "simulation_time": 10.862491846084595,
        "lines_of_code": 82,
        "anomalous": true,
        "vae_anomalous": true
      }
    },
    {
      "circuit_id": 18,
      "circuit_name": "8-bit SIPO Shift Register",
      "category": "Sequential",
      "complexity": "simple",
      "original_prompt": "Design an 8-bit Serial-In Parallel-Out (SIPO) shift register with clock, reset, serial input, and parallel output[7:0]. Include testbench shifting in pattern 10101100.",
      "model": "gpt-4o",
      "prompt_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 3.2168571949005127,
        "simulation_time": 12.94519329071045,
        "lines_of_code": 59,
        "anomalous": true,
        "vae_anomalous": true
      },
      "mermaid_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 3.136082410812378,
        "simulation_time": 10.02768325805664,
        "lines_of_code": 58,
        "anomalous": true,
        "vae_anomalous": true
      },
      "combined": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 2.584214448928833,
        "simulation_time": 7.067267417907715,
        "lines_of_code": 60,
        "anomalous": true,
        "vae_anomalous": true
      }
    },
    {
      "circuit_id": 19,
      "circuit_name": "4-bit XOR Array",
      "category": "Combinational",
      "complexity": "simple",
      "original_prompt": "Create a 4-bit XOR gate array with inputs a[3:0], b[3:0], and output result[3:0] where each bit is result[i] = a[i] XOR b[i]. Include testbench.",
      "model": "gpt-4o",
      "prompt_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 2.9603564739227295,
        "simulation_time": 10.651808261871338,
        "lines_of_code": 38,
        "anomalous": true,
        "vae_anomalous": false
      },
      "mermaid_only": {
        "success": false,
        "compiled": false,
        "simulated": false,
        "has_waveform": false,
        "anomalous": null
      },
      "combined": {
        "success": false,
        "compiled": false,
        "simulated": false,
        "has_waveform": false,
        "anomalous": null
      }
    },
    {
      "circuit_id": 20,
      "circuit_name": "4-bit Magnitude Comparator",
      "category": "Combinational",
      "complexity": "simple",
      "original_prompt": "Design a 4-bit magnitude comparator with inputs a[3:0], b[3:0] and outputs equal, greater, less. Include testbench with boundary cases.",
      "model": "gpt-4o",
      "prompt_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 4.35638165473938,
        "simulation_time": 8.674267053604126,
        "lines_of_code": 60,
        "anomalous": true,
        "vae_anomalous": false
      },
      "mermaid_only": {
        "success": false,
        "compiled": false,
        "simulated": false,
        "has_waveform": false,
        "anomalous": null
      },
      "combined": {
        "success": false,
        "compiled": false,
        "simulated": false,
        "has_waveform": false,
        "anomalous": null
      }
    },
    {
      "circuit_id": 21,
      "circuit_name": "8-bit Barrel Shifter",
      "category": "Arithmetic",
      "complexity": "medium",
      "original_prompt": "Design an 8-bit barrel shifter supporting left shift, right shift, and rotate operations. Inputs: data[7:0], shift_amt[2:0], op[1:0] (00=LSL, 01=LSR, 10=ROL, 11=ROR). Output: result[7:0]. Include testbench.",
      "model": "gpt-4o",
      "prompt_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 2.7913291454315186,
        "simulation_time": 6.79261040687561,
        "lines_of_code": 59,
        "anomalous": true,
        "vae_anomalous": false
      },
      "mermaid_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 3.6842634677886963,
        "simulation_time": 10.788193225860596,
        "lines_of_code": 52,
        "anomalous": true,
        "vae_anomalous": false
      },
      "combined": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 3.7803971767425537,
        "simulation_time": 7.539743900299072,
        "lines_of_code": 50,
        "anomalous": true,
        "vae_anomalous": false
      }
    },
    {
      "circuit_id": 22,
      "circuit_name": "1-to-8 Demux",
      "category": "Combinational",
      "complexity": "medium",
      "original_prompt": "Create a 1-to-8 demultiplexer with input data_in, select sel[2:0], enable en, and outputs out[7:0]. When enabled, data_in routes to selected output. Include testbench.",
      "model": "gpt-4o",
      "prompt_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 5.124265432357788,
        "simulation_time": 10.1946382522583,
        "lines_of_code": 67,
        "anomalous": true,
        "vae_anomalous": false
      },
      "mermaid_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 4.023493528366089,
        "simulation_time": 10.879856586456299,
        "lines_of_code": 67,
        "anomalous": true,
        "vae_anomalous": false
      },
      "combined": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 5.949801921844482,
        "simulation_time": 8.175109148025513,
        "lines_of_code": 73,
        "anomalous": true,
        "vae_anomalous": false
      }
    },
    {
      "circuit_id": 23,
      "circuit_name": "Mealy Sequence Detector",
      "category": "State Machine",
      "complexity": "medium",
      "original_prompt": "Design a Mealy FSM detecting sequence 101 in serial input with non-overlapping detection. Output high for one cycle when pattern detected. Include testbench with sequence: 1101011010.",
      "model": "gpt-4o",
      "prompt_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 5.237443447113037,
        "simulation_time": 15.267231225967407,
        "lines_of_code": 96,
        "anomalous": true,
        "vae_anomalous": true
      },
      "mermaid_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 6.70349907875061,
        "simulation_time": 16.14785146713257,
        "lines_of_code": 81,
        "anomalous": true,
        "vae_anomalous": true
      },
      "combined": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 6.635100841522217,
        "simulation_time": 13.38614296913147,
        "lines_of_code": 89,
        "anomalous": true,
        "vae_anomalous": true
      }
    },
    {
      "circuit_id": 24,
      "circuit_name": "8-bit Bidirectional Shift Register",
      "category": "Sequential",
      "complexity": "medium",
      "original_prompt": "Create an 8-bit bidirectional shift register with clock, reset, load, direction (1=right, 0=left), parallel input[7:0], serial_in_left, serial_in_right, and parallel output[7:0]. Include testbench.",
      "model": "gpt-4o",
      "prompt_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 5.275754690170288,
        "simulation_time": 9.375702857971191,
        "lines_of_code": 70,
        "anomalous": false,
        "vae_anomalous": true
      },
      "mermaid_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 14.49627137184143,
        "simulation_time": 9.8596830368042,
        "lines_of_code": 84,
        "anomalous": true,
        "vae_anomalous": true
      },
      "combined": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 5.664181709289551,
        "simulation_time": 8.369673252105713,
        "lines_of_code": 81,
        "anomalous": true,
        "vae_anomalous": true
      }
    },
    {
      "circuit_id": 25,
      "circuit_name": "Binary to Gray Converter",
      "category": "Combinational",
      "complexity": "medium",
      "original_prompt": "Design a 4-bit binary to Gray code converter with input binary[3:0] and output gray[3:0]. Include testbench verifying all 16 conversions.",
      "model": "gpt-4o",
      "prompt_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 4.059182167053223,
        "simulation_time": 8.672966241836548,
        "lines_of_code": 53,
        "anomalous": true,
        "vae_anomalous": false
      },
      "mermaid_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 3.3571877479553223,
        "simulation_time": 4.531733751296997,
        "lines_of_code": 48,
        "anomalous": false,
        "vae_anomalous": false
      },
      "combined": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 3.310314178466797,
        "simulation_time": 8.532084703445435,
        "lines_of_code": 38,
        "anomalous": true,
        "vae_anomalous": false
      }
    },
    {
      "circuit_id": 26,
      "circuit_name": "Vending Machine Controller",
      "category": "State Machine",
      "complexity": "complex",
      "original_prompt": "Design a vending machine FSM that accepts 5\u00a2 and 10\u00a2 coins until 15\u00a2 is reached, then dispenses item and returns change. Inputs: clk, rst, nickel, dime. Outputs: dispense, change[1:0] (in 5\u00a2 units). Include testbench with multiple purchase scenarios.",
      "model": "gpt-4o",
      "prompt_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 6.166418552398682,
        "simulation_time": 9.926678657531738,
        "lines_of_code": 106,
        "anomalous": true,
        "vae_anomalous": false
      },
      "mermaid_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 6.074766159057617,
        "simulation_time": 9.976577043533325,
        "lines_of_code": 99,
        "anomalous": true,
        "vae_anomalous": false
      },
      "combined": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 8.620865106582642,
        "simulation_time": 9.557687044143677,
        "lines_of_code": 101,
        "anomalous": true,
        "vae_anomalous": false
      }
    },
    {
      "circuit_id": 27,
      "circuit_name": "I2C Master Controller",
      "category": "Protocol",
      "complexity": "complex",
      "original_prompt": "Design an I2C master controller with start condition, stop condition, byte transmission, and ACK/NACK handling. Inputs: clk, rst, start, stop, data_in[7:0], wr_en. Outputs: scl, sda_out, sda_oe, busy, ack_received. Include testbench with write transaction.",
      "model": "gpt-4o",
      "prompt_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 11.947642087936401,
        "simulation_time": 9.001189231872559,
        "lines_of_code": 150,
        "anomalous": true,
        "vae_anomalous": true
      },
      "mermaid_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 7.499114036560059,
        "simulation_time": 9.490980863571167,
        "lines_of_code": 137,
        "anomalous": true,
        "vae_anomalous": true
      },
      "combined": {
        "success": false,
        "compiled": false,
        "simulated": false,
        "has_waveform": false,
        "generation_time": 7.089381694793701,
        "simulation_time": 0.015471696853637695,
        "lines_of_code": 162,
        "anomalous": null,
        "vae_anomalous": null
      }
    },
    {
      "circuit_id": 28,
      "circuit_name": "16x8 Dual-Port RAM",
      "category": "CPU Component",
      "complexity": "complex",
      "original_prompt": "Create a 16x8 dual-port RAM with independent read/write ports. Port A: clk_a, we_a, addr_a[3:0], din_a[7:0], dout_a[7:0]. Port B: clk_b, we_b, addr_b[3:0], din_b[7:0], dout_b[7:0]. Include testbench with simultaneous operations.",
      "model": "gpt-4o",
      "prompt_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 6.005704402923584,
        "simulation_time": 6.131773471832275,
        "lines_of_code": 82,
        "anomalous": false,
        "vae_anomalous": false
      },
      "mermaid_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 5.498961448669434,
        "simulation_time": 15.031293869018555,
        "lines_of_code": 80,
        "anomalous": true,
        "vae_anomalous": false
      },
      "combined": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 6.317748308181763,
        "simulation_time": 8.914931535720825,
        "lines_of_code": 80,
        "anomalous": true,
        "vae_anomalous": true
      }
    },
    {
      "circuit_id": 29,
      "circuit_name": "Programmable Frequency Divider",
      "category": "Advanced Sequential",
      "complexity": "complex",
      "original_prompt": "Design a programmable frequency divider with 8-bit division ratio. Inputs: clk, rst, divisor[7:0] (divides by 2 to 256). Output: clk_out. Generate 50% duty cycle output. Include testbench with divisor values: 2, 4, 8, 16.",
      "model": "gpt-4o",
      "prompt_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 4.530670404434204,
        "simulation_time": 7.147701978683472,
        "lines_of_code": 65,
        "anomalous": true,
        "vae_anomalous": true
      },
      "mermaid_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 5.024425745010376,
        "simulation_time": 13.702312469482422,
        "lines_of_code": 143,
        "anomalous": true,
        "vae_anomalous": true
      },
      "combined": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 4.059772253036499,
        "simulation_time": 10.602372884750366,
        "lines_of_code": 74,
        "anomalous": true,
        "vae_anomalous": true
      }
    },
    {
      "circuit_id": 30,
      "circuit_name": "UART Receiver",
      "category": "Protocol",
      "complexity": "complex",
      "original_prompt": "Design a UART receiver with states: IDLE, START, DATA, STOP. Protocol: detect START(0), receive 8 data bits LSB-first, verify STOP(1). Inputs: clk, rst, rx. Outputs: rx_data[7:0], rx_valid, frame_error. Baud rate divider. Include testbench.",
      "model": "gpt-4o",
      "prompt_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 10.245289087295532,
        "simulation_time": 9.598029375076294,
        "lines_of_code": 156,
        "anomalous": false,
        "vae_anomalous": true
      },
      "mermaid_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 15.233237981796265,
        "simulation_time": 0.09518003463745117,
        "lines_of_code": 239,
        "anomalous": false,
        "vae_anomalous": true
      },
      "combined": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 13.3594651222229,
        "simulation_time": 0.5716400146484375,
        "lines_of_code": 146,
        "anomalous": false,
        "vae_anomalous": true
      }
    }
  ]
}