{
  "metadata": {
    "test_date": "2025-10-26T12:32:28.321017",
    "total_circuits": 30,
    "model": "claude",
    "test_type": "three_way_multimodal"
  },
  "statistics": {
    "total_circuits": 30,
    "prompt_only": {
      "correct": 12,
      "total": 30,
      "percentage": 40.0
    },
    "mermaid_only": {
      "correct": 10,
      "total": 30,
      "percentage": 33.33333333333333
    },
    "combined": {
      "correct": 8,
      "total": 30,
      "percentage": 26.666666666666668
    }
  },
  "results": [
    {
      "circuit_id": 1,
      "circuit_name": "2-to-1 MUX",
      "category": "Combinational",
      "complexity": "simple",
      "original_prompt": "Design a 2-to-1 multiplexer with inputs a, b, select sel, and output out. Include testbench testing all combinations.",
      "model": "claude",
      "prompt_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 5.393469572067261,
        "simulation_time": 8.95134687423706,
        "lines_of_code": 51,
        "anomalous": false,
        "vae_anomalous": false
      },
      "mermaid_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 6.346755027770996,
        "simulation_time": 7.090155601501465,
        "lines_of_code": 70,
        "anomalous": false,
        "vae_anomalous": false
      },
      "combined": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 5.292959451675415,
        "simulation_time": 7.060417175292969,
        "lines_of_code": 55,
        "anomalous": false,
        "vae_anomalous": false
      }
    },
    {
      "circuit_id": 2,
      "circuit_name": "D Flip-Flop",
      "category": "Sequential",
      "complexity": "simple",
      "original_prompt": "Create a D flip-flop with clock, reset, input d, and output q. Include testbench with timing verification.",
      "model": "claude",
      "prompt_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 4.487614393234253,
        "simulation_time": 7.30992579460144,
        "lines_of_code": 54,
        "anomalous": false,
        "vae_anomalous": false
      },
      "mermaid_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 4.692679166793823,
        "simulation_time": 7.601444244384766,
        "lines_of_code": 57,
        "anomalous": false,
        "vae_anomalous": false
      },
      "combined": {
        "success": false,
        "compiled": false,
        "simulated": false,
        "has_waveform": false,
        "generation_time": 6.65817403793335,
        "simulation_time": 0.04131937026977539,
        "lines_of_code": 68,
        "anomalous": null,
        "vae_anomalous": null
      }
    },
    {
      "circuit_id": 3,
      "circuit_name": "4-bit Counter",
      "category": "Sequential",
      "complexity": "simple",
      "original_prompt": "Design a 4-bit synchronous counter with clock, reset, enable, and count[3:0]. Include testbench.",
      "model": "claude",
      "prompt_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 4.626952171325684,
        "simulation_time": 7.02758526802063,
        "lines_of_code": 52,
        "anomalous": false,
        "vae_anomalous": false
      },
      "mermaid_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 6.06606388092041,
        "simulation_time": 6.7262232303619385,
        "lines_of_code": 62,
        "anomalous": false,
        "vae_anomalous": false
      },
      "combined": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 6.056942701339722,
        "simulation_time": 7.882943391799927,
        "lines_of_code": 65,
        "anomalous": false,
        "vae_anomalous": false
      }
    },
    {
      "circuit_id": 4,
      "circuit_name": "Full Adder",
      "category": "Combinational",
      "complexity": "simple",
      "original_prompt": "Create a full adder with inputs a, b, cin and outputs sum, cout. Include testbench with all 8 cases.",
      "model": "claude",
      "prompt_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 5.166877508163452,
        "simulation_time": 7.17797064781189,
        "lines_of_code": 50,
        "anomalous": false,
        "vae_anomalous": false
      },
      "mermaid_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 5.6460981369018555,
        "simulation_time": 10.62986421585083,
        "lines_of_code": 64,
        "anomalous": false,
        "vae_anomalous": false
      },
      "combined": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 5.806668996810913,
        "simulation_time": 8.973064661026001,
        "lines_of_code": 71,
        "anomalous": false,
        "vae_anomalous": false
      }
    },
    {
      "circuit_id": 5,
      "circuit_name": "2-bit Comparator",
      "category": "Combinational",
      "complexity": "simple",
      "original_prompt": "Design a 2-bit comparator with inputs a[1:0], b[1:0] and outputs eq, gt, lt. Include testbench.",
      "model": "claude",
      "prompt_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 6.840868949890137,
        "simulation_time": 7.94760537147522,
        "lines_of_code": 61,
        "anomalous": false,
        "vae_anomalous": false
      },
      "mermaid_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 6.103150844573975,
        "simulation_time": 6.565417766571045,
        "lines_of_code": 64,
        "anomalous": false,
        "vae_anomalous": false
      },
      "combined": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 8.576634168624878,
        "simulation_time": 6.901808738708496,
        "lines_of_code": 75,
        "anomalous": false,
        "vae_anomalous": false
      }
    },
    {
      "circuit_id": 6,
      "circuit_name": "4-bit ALU",
      "category": "Arithmetic",
      "complexity": "medium",
      "original_prompt": "Design a 4-bit ALU supporting ADD, SUB, AND, OR operations. Inputs: a[3:0], b[3:0], op[1:0]. Outputs: result[3:0], zero. Include testbench.",
      "model": "claude",
      "prompt_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 6.837061405181885,
        "simulation_time": 6.277543306350708,
        "lines_of_code": 70,
        "anomalous": false,
        "vae_anomalous": false
      },
      "mermaid_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 5.4602978229522705,
        "simulation_time": 6.415961980819702,
        "lines_of_code": 64,
        "anomalous": false,
        "vae_anomalous": true
      },
      "combined": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 6.172806739807129,
        "simulation_time": 6.274449110031128,
        "lines_of_code": 74,
        "anomalous": false,
        "vae_anomalous": false
      }
    },
    {
      "circuit_id": 7,
      "circuit_name": "8:1 Multiplexer",
      "category": "Combinational",
      "complexity": "medium",
      "original_prompt": "Create an 8:1 multiplexer with input data[7:0], select sel[2:0], and output out. Include testbench.",
      "model": "claude",
      "prompt_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 6.6227335929870605,
        "simulation_time": 7.32398533821106,
        "lines_of_code": 69,
        "anomalous": false,
        "vae_anomalous": false
      },
      "mermaid_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 6.179595947265625,
        "simulation_time": 8.84387493133545,
        "lines_of_code": 65,
        "anomalous": false,
        "vae_anomalous": false
      },
      "combined": {
        "success": false,
        "compiled": false,
        "simulated": false,
        "has_waveform": false,
        "generation_time": 5.413109302520752,
        "simulation_time": 82.78011012077332,
        "lines_of_code": 63,
        "anomalous": null,
        "vae_anomalous": null
      }
    },
    {
      "circuit_id": 8,
      "circuit_name": "Sequence Detector",
      "category": "State Machine",
      "complexity": "medium",
      "original_prompt": "Design an FSM detecting pattern 1011 in serial input with overlapping detection. Include testbench with sequence: 10110111011.",
      "model": "claude",
      "prompt_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 9.379966020584106,
        "simulation_time": 8.240286827087402,
        "lines_of_code": 89,
        "anomalous": false,
        "vae_anomalous": false
      },
      "mermaid_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 7.496714115142822,
        "simulation_time": 7.980120897293091,
        "lines_of_code": 86,
        "anomalous": false,
        "vae_anomalous": false
      },
      "combined": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 8.20463490486145,
        "simulation_time": 9.20505952835083,
        "lines_of_code": 75,
        "anomalous": false,
        "vae_anomalous": false
      }
    },
    {
      "circuit_id": 9,
      "circuit_name": "4-bit Shift Register",
      "category": "Sequential",
      "complexity": "medium",
      "original_prompt": "Create a 4-bit PISO shift register with clock, reset, load, parallel input[3:0], and serial output. Include testbench.",
      "model": "claude",
      "prompt_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 6.5609235763549805,
        "simulation_time": 13.868006229400635,
        "lines_of_code": 72,
        "anomalous": false,
        "vae_anomalous": true
      },
      "mermaid_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 7.8314049243927,
        "simulation_time": 9.082571268081665,
        "lines_of_code": 67,
        "anomalous": true,
        "vae_anomalous": false
      },
      "combined": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 6.182114362716675,
        "simulation_time": 9.093722820281982,
        "lines_of_code": 69,
        "anomalous": false,
        "vae_anomalous": false
      }
    },
    {
      "circuit_id": 10,
      "circuit_name": "Priority Encoder",
      "category": "Combinational",
      "complexity": "medium",
      "original_prompt": "Design a 4-to-2 priority encoder with input in[3:0], output out[1:0], and valid bit. Highest bit has priority. Include testbench.",
      "model": "claude",
      "prompt_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 5.164355278015137,
        "simulation_time": 6.921957015991211,
        "lines_of_code": 49,
        "anomalous": false,
        "vae_anomalous": false
      },
      "mermaid_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 5.910815477371216,
        "simulation_time": 7.964856386184692,
        "lines_of_code": 53,
        "anomalous": false,
        "vae_anomalous": false
      },
      "combined": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 5.720253229141235,
        "simulation_time": 13.974272012710571,
        "lines_of_code": 58,
        "anomalous": true,
        "vae_anomalous": false
      }
    },
    {
      "circuit_id": 11,
      "circuit_name": "Traffic Light Controller",
      "category": "State Machine",
      "complexity": "complex",
      "original_prompt": "Design a traffic light FSM with 4 states: NS_GREEN, NS_YELLOW, EW_GREEN, EW_YELLOW. Inputs: clk, rst, emergency. Outputs: ns_light[1:0], ew_light[1:0]. Timing: GREEN=8 cycles, YELLOW=2 cycles. Emergency makes both RED. Include testbench.",
      "model": "claude",
      "prompt_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 11.43221139907837,
        "simulation_time": 8.314235925674438,
        "lines_of_code": 136,
        "anomalous": false,
        "vae_anomalous": true
      },
      "mermaid_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 11.789142847061157,
        "simulation_time": 7.778343677520752,
        "lines_of_code": 133,
        "anomalous": false,
        "vae_anomalous": true
      },
      "combined": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 11.842020034790039,
        "simulation_time": 8.78863263130188,
        "lines_of_code": 117,
        "anomalous": false,
        "vae_anomalous": false
      }
    },
    {
      "circuit_id": 12,
      "circuit_name": "UART Transmitter",
      "category": "State Machine",
      "complexity": "complex",
      "original_prompt": "Design UART transmitter with states: IDLE, START, DATA, STOP. Protocol: START(0), 8 data bits LSB-first, STOP(1). Baud rate divider. Include testbench.",
      "model": "claude",
      "prompt_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 12.293293476104736,
        "simulation_time": 0.49692463874816895,
        "lines_of_code": 132,
        "anomalous": false,
        "vae_anomalous": false
      },
      "mermaid_only": {
        "success": false,
        "compiled": false,
        "simulated": false,
        "has_waveform": false,
        "anomalous": null
      },
      "combined": {
        "success": false,
        "compiled": false,
        "simulated": false,
        "has_waveform": false,
        "anomalous": null
      }
    },
    {
      "circuit_id": 13,
      "circuit_name": "8-bit Register File",
      "category": "CPU Component",
      "complexity": "complex",
      "original_prompt": "Create 8-register \u00d7 8-bit register file with dual read ports and single write port. Include testbench with simultaneous operations.",
      "model": "claude",
      "prompt_only": {
        "success": false,
        "compiled": false,
        "simulated": false,
        "has_waveform": false,
        "anomalous": null
      },
      "mermaid_only": {
        "success": false,
        "compiled": false,
        "simulated": false,
        "has_waveform": false,
        "anomalous": null
      },
      "combined": {
        "success": false,
        "compiled": false,
        "simulated": false,
        "has_waveform": false,
        "anomalous": null
      }
    },
    {
      "circuit_id": 14,
      "circuit_name": "PWM Generator",
      "category": "Advanced Sequential",
      "complexity": "complex",
      "original_prompt": "Design 8-bit resolution PWM generator with configurable duty cycle. Include testbench with duty cycles: 0%, 25%, 50%, 75%, 100%.",
      "model": "claude",
      "prompt_only": {
        "success": false,
        "compiled": false,
        "simulated": false,
        "has_waveform": false,
        "anomalous": null
      },
      "mermaid_only": {
        "success": false,
        "compiled": false,
        "simulated": false,
        "has_waveform": false,
        "anomalous": null
      },
      "combined": {
        "success": false,
        "compiled": false,
        "simulated": false,
        "has_waveform": false,
        "anomalous": null
      }
    },
    {
      "circuit_id": 15,
      "circuit_name": "SPI Master",
      "category": "Protocol",
      "complexity": "complex",
      "original_prompt": "Design SPI master supporting mode 0 (CPOL=0, CPHA=0). Include SCLK generation, MOSI/MISO handling. Include testbench.",
      "model": "claude",
      "prompt_only": {
        "success": false,
        "compiled": false,
        "simulated": false,
        "has_waveform": false,
        "anomalous": null
      },
      "mermaid_only": {
        "success": false,
        "compiled": false,
        "simulated": false,
        "has_waveform": false,
        "anomalous": null
      },
      "combined": {
        "success": false,
        "compiled": false,
        "simulated": false,
        "has_waveform": false,
        "anomalous": null
      }
    },
    {
      "circuit_id": 16,
      "circuit_name": "3-to-8 Decoder",
      "category": "Combinational",
      "complexity": "simple",
      "original_prompt": "Design a 3-to-8 decoder with inputs a[2:0], enable en, and outputs y[7:0]. When enabled, only one output is high based on input. Include testbench testing all combinations.",
      "model": "claude",
      "prompt_only": {
        "success": false,
        "compiled": false,
        "simulated": false,
        "has_waveform": false,
        "anomalous": null
      },
      "mermaid_only": {
        "success": false,
        "compiled": false,
        "simulated": false,
        "has_waveform": false,
        "anomalous": null
      },
      "combined": {
        "success": false,
        "compiled": false,
        "simulated": false,
        "has_waveform": false,
        "anomalous": null
      }
    },
    {
      "circuit_id": 17,
      "circuit_name": "JK Flip-Flop",
      "category": "Sequential",
      "complexity": "simple",
      "original_prompt": "Create a JK flip-flop with clock, reset, inputs j and k, and outputs q and q_bar. Include testbench verifying all four input combinations (00, 01, 10, 11).",
      "model": "claude",
      "prompt_only": {
        "success": false,
        "compiled": false,
        "simulated": false,
        "has_waveform": false,
        "anomalous": null
      },
      "mermaid_only": {
        "success": false,
        "compiled": false,
        "simulated": false,
        "has_waveform": false,
        "anomalous": null
      },
      "combined": {
        "success": false,
        "compiled": false,
        "simulated": false,
        "has_waveform": false,
        "anomalous": null
      }
    },
    {
      "circuit_id": 18,
      "circuit_name": "8-bit SIPO Shift Register",
      "category": "Sequential",
      "complexity": "simple",
      "original_prompt": "Design an 8-bit Serial-In Parallel-Out (SIPO) shift register with clock, reset, serial input, and parallel output[7:0]. Include testbench shifting in pattern 10101100.",
      "model": "claude",
      "prompt_only": {
        "success": false,
        "compiled": false,
        "simulated": false,
        "has_waveform": false,
        "anomalous": null
      },
      "mermaid_only": {
        "success": false,
        "compiled": false,
        "simulated": false,
        "has_waveform": false,
        "anomalous": null
      },
      "combined": {
        "success": false,
        "compiled": false,
        "simulated": false,
        "has_waveform": false,
        "anomalous": null
      }
    },
    {
      "circuit_id": 19,
      "circuit_name": "4-bit XOR Array",
      "category": "Combinational",
      "complexity": "simple",
      "original_prompt": "Create a 4-bit XOR gate array with inputs a[3:0], b[3:0], and output result[3:0] where each bit is result[i] = a[i] XOR b[i]. Include testbench.",
      "model": "claude",
      "prompt_only": {
        "success": false,
        "compiled": false,
        "simulated": false,
        "has_waveform": false,
        "anomalous": null
      },
      "mermaid_only": {
        "success": false,
        "compiled": false,
        "simulated": false,
        "has_waveform": false,
        "anomalous": null
      },
      "combined": {
        "success": false,
        "compiled": false,
        "simulated": false,
        "has_waveform": false,
        "anomalous": null
      }
    },
    {
      "circuit_id": 20,
      "circuit_name": "4-bit Magnitude Comparator",
      "category": "Combinational",
      "complexity": "simple",
      "original_prompt": "Design a 4-bit magnitude comparator with inputs a[3:0], b[3:0] and outputs equal, greater, less. Include testbench with boundary cases.",
      "model": "claude",
      "prompt_only": {
        "success": false,
        "compiled": false,
        "simulated": false,
        "has_waveform": false,
        "anomalous": null
      },
      "mermaid_only": {
        "success": false,
        "compiled": false,
        "simulated": false,
        "has_waveform": false,
        "anomalous": null
      },
      "combined": {
        "success": false,
        "compiled": false,
        "simulated": false,
        "has_waveform": false,
        "anomalous": null
      }
    },
    {
      "circuit_id": 21,
      "circuit_name": "8-bit Barrel Shifter",
      "category": "Arithmetic",
      "complexity": "medium",
      "original_prompt": "Design an 8-bit barrel shifter supporting left shift, right shift, and rotate operations. Inputs: data[7:0], shift_amt[2:0], op[1:0] (00=LSL, 01=LSR, 10=ROL, 11=ROR). Output: result[7:0]. Include testbench.",
      "model": "claude",
      "prompt_only": {
        "success": false,
        "compiled": false,
        "simulated": false,
        "has_waveform": false,
        "anomalous": null
      },
      "mermaid_only": {
        "success": false,
        "compiled": false,
        "simulated": false,
        "has_waveform": false,
        "anomalous": null
      },
      "combined": {
        "success": false,
        "compiled": false,
        "simulated": false,
        "has_waveform": false,
        "anomalous": null
      }
    },
    {
      "circuit_id": 22,
      "circuit_name": "1-to-8 Demux",
      "category": "Combinational",
      "complexity": "medium",
      "original_prompt": "Create a 1-to-8 demultiplexer with input data_in, select sel[2:0], enable en, and outputs out[7:0]. When enabled, data_in routes to selected output. Include testbench.",
      "model": "claude",
      "prompt_only": {
        "success": false,
        "compiled": false,
        "simulated": false,
        "has_waveform": false,
        "anomalous": null
      },
      "mermaid_only": {
        "success": false,
        "compiled": false,
        "simulated": false,
        "has_waveform": false,
        "anomalous": null
      },
      "combined": {
        "success": false,
        "compiled": false,
        "simulated": false,
        "has_waveform": false,
        "anomalous": null
      }
    },
    {
      "circuit_id": 23,
      "circuit_name": "Mealy Sequence Detector",
      "category": "State Machine",
      "complexity": "medium",
      "original_prompt": "Design a Mealy FSM detecting sequence 101 in serial input with non-overlapping detection. Output high for one cycle when pattern detected. Include testbench with sequence: 1101011010.",
      "model": "claude",
      "prompt_only": {
        "success": false,
        "compiled": false,
        "simulated": false,
        "has_waveform": false,
        "anomalous": null
      },
      "mermaid_only": {
        "success": false,
        "compiled": false,
        "simulated": false,
        "has_waveform": false,
        "anomalous": null
      },
      "combined": {
        "success": false,
        "compiled": false,
        "simulated": false,
        "has_waveform": false,
        "anomalous": null
      }
    },
    {
      "circuit_id": 24,
      "circuit_name": "8-bit Bidirectional Shift Register",
      "category": "Sequential",
      "complexity": "medium",
      "original_prompt": "Create an 8-bit bidirectional shift register with clock, reset, load, direction (1=right, 0=left), parallel input[7:0], serial_in_left, serial_in_right, and parallel output[7:0]. Include testbench.",
      "model": "claude",
      "prompt_only": {
        "success": false,
        "compiled": false,
        "simulated": false,
        "has_waveform": false,
        "anomalous": null
      },
      "mermaid_only": {
        "success": false,
        "compiled": false,
        "simulated": false,
        "has_waveform": false,
        "anomalous": null
      },
      "combined": {
        "success": false,
        "compiled": false,
        "simulated": false,
        "has_waveform": false,
        "anomalous": null
      }
    },
    {
      "circuit_id": 25,
      "circuit_name": "Binary to Gray Converter",
      "category": "Combinational",
      "complexity": "medium",
      "original_prompt": "Design a 4-bit binary to Gray code converter with input binary[3:0] and output gray[3:0]. Include testbench verifying all 16 conversions.",
      "model": "claude",
      "prompt_only": {
        "success": false,
        "compiled": false,
        "simulated": false,
        "has_waveform": false,
        "anomalous": null
      },
      "mermaid_only": {
        "success": false,
        "compiled": false,
        "simulated": false,
        "has_waveform": false,
        "anomalous": null
      },
      "combined": {
        "success": false,
        "compiled": false,
        "simulated": false,
        "has_waveform": false,
        "anomalous": null
      }
    },
    {
      "circuit_id": 26,
      "circuit_name": "Vending Machine Controller",
      "category": "State Machine",
      "complexity": "complex",
      "original_prompt": "Design a vending machine FSM that accepts 5\u00a2 and 10\u00a2 coins until 15\u00a2 is reached, then dispenses item and returns change. Inputs: clk, rst, nickel, dime. Outputs: dispense, change[1:0] (in 5\u00a2 units). Include testbench with multiple purchase scenarios.",
      "model": "claude",
      "prompt_only": {
        "success": false,
        "compiled": false,
        "simulated": false,
        "has_waveform": false,
        "anomalous": null
      },
      "mermaid_only": {
        "success": false,
        "compiled": false,
        "simulated": false,
        "has_waveform": false,
        "anomalous": null
      },
      "combined": {
        "success": false,
        "compiled": false,
        "simulated": false,
        "has_waveform": false,
        "anomalous": null
      }
    },
    {
      "circuit_id": 27,
      "circuit_name": "I2C Master Controller",
      "category": "Protocol",
      "complexity": "complex",
      "original_prompt": "Design an I2C master controller with start condition, stop condition, byte transmission, and ACK/NACK handling. Inputs: clk, rst, start, stop, data_in[7:0], wr_en. Outputs: scl, sda_out, sda_oe, busy, ack_received. Include testbench with write transaction.",
      "model": "claude",
      "prompt_only": {
        "success": false,
        "compiled": false,
        "simulated": false,
        "has_waveform": false,
        "anomalous": null
      },
      "mermaid_only": {
        "success": false,
        "compiled": false,
        "simulated": false,
        "has_waveform": false,
        "anomalous": null
      },
      "combined": {
        "success": false,
        "compiled": false,
        "simulated": false,
        "has_waveform": false,
        "anomalous": null
      }
    },
    {
      "circuit_id": 28,
      "circuit_name": "16x8 Dual-Port RAM",
      "category": "CPU Component",
      "complexity": "complex",
      "original_prompt": "Create a 16x8 dual-port RAM with independent read/write ports. Port A: clk_a, we_a, addr_a[3:0], din_a[7:0], dout_a[7:0]. Port B: clk_b, we_b, addr_b[3:0], din_b[7:0], dout_b[7:0]. Include testbench with simultaneous operations.",
      "model": "claude",
      "prompt_only": {
        "success": false,
        "compiled": false,
        "simulated": false,
        "has_waveform": false,
        "anomalous": null
      },
      "mermaid_only": {
        "success": false,
        "compiled": false,
        "simulated": false,
        "has_waveform": false,
        "anomalous": null
      },
      "combined": {
        "success": false,
        "compiled": false,
        "simulated": false,
        "has_waveform": false,
        "anomalous": null
      }
    },
    {
      "circuit_id": 29,
      "circuit_name": "Programmable Frequency Divider",
      "category": "Advanced Sequential",
      "complexity": "complex",
      "original_prompt": "Design a programmable frequency divider with 8-bit division ratio. Inputs: clk, rst, divisor[7:0] (divides by 2 to 256). Output: clk_out. Generate 50% duty cycle output. Include testbench with divisor values: 2, 4, 8, 16.",
      "model": "claude",
      "prompt_only": {
        "success": false,
        "compiled": false,
        "simulated": false,
        "has_waveform": false,
        "anomalous": null
      },
      "mermaid_only": {
        "success": false,
        "compiled": false,
        "simulated": false,
        "has_waveform": false,
        "anomalous": null
      },
      "combined": {
        "success": false,
        "compiled": false,
        "simulated": false,
        "has_waveform": false,
        "anomalous": null
      }
    },
    {
      "circuit_id": 30,
      "circuit_name": "UART Receiver",
      "category": "Protocol",
      "complexity": "complex",
      "original_prompt": "Design a UART receiver with states: IDLE, START, DATA, STOP. Protocol: detect START(0), receive 8 data bits LSB-first, verify STOP(1). Inputs: clk, rst, rx. Outputs: rx_data[7:0], rx_valid, frame_error. Baud rate divider. Include testbench.",
      "model": "claude",
      "prompt_only": {
        "success": false,
        "compiled": false,
        "simulated": false,
        "has_waveform": false,
        "anomalous": null
      },
      "mermaid_only": {
        "success": false,
        "compiled": false,
        "simulated": false,
        "has_waveform": false,
        "anomalous": null
      },
      "combined": {
        "success": false,
        "compiled": false,
        "simulated": false,
        "has_waveform": false,
        "anomalous": null
      }
    }
  ]
}