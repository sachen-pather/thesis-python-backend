{
  "metadata": {
    "test_date": "2025-10-26T14:28:41.029604",
    "total_circuits": 30,
    "model": "gpt-4o",
    "test_type": "three_way_multimodal"
  },
  "statistics": {
    "total_circuits": 30,
    "prompt_only": {
      "correct": 5,
      "total": 30,
      "percentage": 16.666666666666664
    },
    "mermaid_only": {
      "correct": 7,
      "total": 30,
      "percentage": 23.333333333333332
    },
    "combined": {
      "correct": 6,
      "total": 30,
      "percentage": 20.0
    }
  },
  "results": [
    {
      "circuit_id": 1,
      "circuit_name": "2-to-1 MUX",
      "category": "Combinational",
      "complexity": "simple",
      "original_prompt": "Design a 2-to-1 multiplexer with inputs a, b, select sel, and output out. Include testbench testing all combinations.",
      "model": "gpt-4o",
      "prompt_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 2.517486810684204,
        "simulation_time": 6.034731149673462,
        "lines_of_code": 42,
        "anomalous": true,
        "vae_anomalous": false
      },
      "mermaid_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 9.961271047592163,
        "simulation_time": 8.117803573608398,
        "lines_of_code": 73,
        "anomalous": true,
        "vae_anomalous": false
      },
      "combined": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 4.074605941772461,
        "simulation_time": 10.334969282150269,
        "lines_of_code": 65,
        "anomalous": true,
        "vae_anomalous": false
      }
    },
    {
      "circuit_id": 2,
      "circuit_name": "D Flip-Flop",
      "category": "Sequential",
      "complexity": "simple",
      "original_prompt": "Create a D flip-flop with clock, reset, input d, and output q. Include testbench with timing verification.",
      "model": "gpt-4o",
      "prompt_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 2.3265979290008545,
        "simulation_time": 6.988705158233643,
        "lines_of_code": 52,
        "anomalous": false,
        "vae_anomalous": true
      },
      "mermaid_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 2.3690345287323,
        "simulation_time": 6.057048320770264,
        "lines_of_code": 53,
        "anomalous": false,
        "vae_anomalous": false
      },
      "combined": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 3.002351999282837,
        "simulation_time": 6.4289329051971436,
        "lines_of_code": 52,
        "anomalous": false,
        "vae_anomalous": true
      }
    },
    {
      "circuit_id": 3,
      "circuit_name": "4-bit Counter",
      "category": "Sequential",
      "complexity": "simple",
      "original_prompt": "Design a 4-bit synchronous counter with clock, reset, enable, and count[3:0]. Include testbench.",
      "model": "gpt-4o",
      "prompt_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 1.989938735961914,
        "simulation_time": 8.806873559951782,
        "lines_of_code": 52,
        "anomalous": true,
        "vae_anomalous": false
      },
      "mermaid_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 2.613328456878662,
        "simulation_time": 9.118765115737915,
        "lines_of_code": 76,
        "anomalous": true,
        "vae_anomalous": false
      },
      "combined": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 1.5587480068206787,
        "simulation_time": 9.102450370788574,
        "lines_of_code": 52,
        "anomalous": true,
        "vae_anomalous": false
      }
    },
    {
      "circuit_id": 4,
      "circuit_name": "Full Adder",
      "category": "Combinational",
      "complexity": "simple",
      "original_prompt": "Create a full adder with inputs a, b, cin and outputs sum, cout. Include testbench with all 8 cases.",
      "model": "gpt-4o",
      "prompt_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 2.837184190750122,
        "simulation_time": 5.446017503738403,
        "lines_of_code": 47,
        "anomalous": false,
        "vae_anomalous": false
      },
      "mermaid_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 5.114919662475586,
        "simulation_time": 8.642030000686646,
        "lines_of_code": 72,
        "anomalous": true,
        "vae_anomalous": true
      },
      "combined": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 3.999847650527954,
        "simulation_time": 8.190699577331543,
        "lines_of_code": 71,
        "anomalous": false,
        "vae_anomalous": false
      }
    },
    {
      "circuit_id": 5,
      "circuit_name": "2-bit Comparator",
      "category": "Combinational",
      "complexity": "simple",
      "original_prompt": "Design a 2-bit comparator with inputs a[1:0], b[1:0] and outputs eq, gt, lt. Include testbench.",
      "model": "gpt-4o",
      "prompt_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 3.5818593502044678,
        "simulation_time": 8.925927877426147,
        "lines_of_code": 62,
        "anomalous": true,
        "vae_anomalous": true
      },
      "mermaid_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 3.794257164001465,
        "simulation_time": 10.234334707260132,
        "lines_of_code": 52,
        "anomalous": true,
        "vae_anomalous": false
      },
      "combined": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 4.558777570724487,
        "simulation_time": 9.373488903045654,
        "lines_of_code": 69,
        "anomalous": true,
        "vae_anomalous": false
      }
    },
    {
      "circuit_id": 6,
      "circuit_name": "4-bit ALU",
      "category": "Arithmetic",
      "complexity": "medium",
      "original_prompt": "Design a 4-bit ALU supporting ADD, SUB, AND, OR operations. Inputs: a[3:0], b[3:0], op[1:0]. Outputs: result[3:0], zero. Include testbench.",
      "model": "gpt-4o",
      "prompt_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 3.254765033721924,
        "simulation_time": 7.993261337280273,
        "lines_of_code": 55,
        "anomalous": true,
        "vae_anomalous": false
      },
      "mermaid_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 2.5812008380889893,
        "simulation_time": 6.7737016677856445,
        "lines_of_code": 56,
        "anomalous": true,
        "vae_anomalous": false
      },
      "combined": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 3.4326584339141846,
        "simulation_time": 9.857753276824951,
        "lines_of_code": 80,
        "anomalous": true,
        "vae_anomalous": true
      }
    },
    {
      "circuit_id": 7,
      "circuit_name": "8:1 Multiplexer",
      "category": "Combinational",
      "complexity": "medium",
      "original_prompt": "Create an 8:1 multiplexer with input data[7:0], select sel[2:0], and output out. Include testbench.",
      "model": "gpt-4o",
      "prompt_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 4.033647537231445,
        "simulation_time": 8.620201826095581,
        "lines_of_code": 57,
        "anomalous": true,
        "vae_anomalous": false
      },
      "mermaid_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 2.5307552814483643,
        "simulation_time": 6.149275302886963,
        "lines_of_code": 55,
        "anomalous": false,
        "vae_anomalous": false
      },
      "combined": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 2.8363523483276367,
        "simulation_time": 6.276641130447388,
        "lines_of_code": 54,
        "anomalous": true,
        "vae_anomalous": true
      }
    },
    {
      "circuit_id": 8,
      "circuit_name": "Sequence Detector",
      "category": "State Machine",
      "complexity": "medium",
      "original_prompt": "Design an FSM detecting pattern 1011 in serial input with overlapping detection. Include testbench with sequence: 10110111011.",
      "model": "gpt-4o",
      "prompt_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 7.547906875610352,
        "simulation_time": 12.943159818649292,
        "lines_of_code": 91,
        "anomalous": true,
        "vae_anomalous": true
      },
      "mermaid_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 5.564688444137573,
        "simulation_time": 11.528815746307373,
        "lines_of_code": 80,
        "anomalous": true,
        "vae_anomalous": true
      },
      "combined": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 5.495341062545776,
        "simulation_time": 7.207570314407349,
        "lines_of_code": 105,
        "anomalous": true,
        "vae_anomalous": true
      }
    },
    {
      "circuit_id": 9,
      "circuit_name": "4-bit Shift Register",
      "category": "Sequential",
      "complexity": "medium",
      "original_prompt": "Create a 4-bit PISO shift register with clock, reset, load, parallel input[3:0], and serial output. Include testbench.",
      "model": "gpt-4o",
      "prompt_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 2.5621509552001953,
        "simulation_time": 8.789034605026245,
        "lines_of_code": 62,
        "anomalous": true,
        "vae_anomalous": true
      },
      "mermaid_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 3.317807912826538,
        "simulation_time": 10.366698265075684,
        "lines_of_code": 66,
        "anomalous": true,
        "vae_anomalous": false
      },
      "combined": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 3.278599262237549,
        "simulation_time": 6.72235894203186,
        "lines_of_code": 63,
        "anomalous": true,
        "vae_anomalous": true
      }
    },
    {
      "circuit_id": 10,
      "circuit_name": "Priority Encoder",
      "category": "Combinational",
      "complexity": "medium",
      "original_prompt": "Design a 4-to-2 priority encoder with input in[3:0], output out[1:0], and valid bit. Highest bit has priority. Include testbench.",
      "model": "gpt-4o",
      "prompt_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 4.047500848770142,
        "simulation_time": 9.093401670455933,
        "lines_of_code": 65,
        "anomalous": true,
        "vae_anomalous": false
      },
      "mermaid_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 5.32980751991272,
        "simulation_time": 7.511183738708496,
        "lines_of_code": 67,
        "anomalous": true,
        "vae_anomalous": false
      },
      "combined": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 3.940908908843994,
        "simulation_time": 9.545407772064209,
        "lines_of_code": 60,
        "anomalous": true,
        "vae_anomalous": false
      }
    },
    {
      "circuit_id": 11,
      "circuit_name": "Traffic Light Controller",
      "category": "State Machine",
      "complexity": "complex",
      "original_prompt": "Design a traffic light FSM with 4 states: NS_GREEN, NS_YELLOW, EW_GREEN, EW_YELLOW. Inputs: clk, rst, emergency. Outputs: ns_light[1:0], ew_light[1:0]. Timing: GREEN=8 cycles, YELLOW=2 cycles. Emergency makes both RED. Include testbench.",
      "model": "gpt-4o",
      "prompt_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 7.300947666168213,
        "simulation_time": 7.960775136947632,
        "lines_of_code": 101,
        "anomalous": true,
        "vae_anomalous": false
      },
      "mermaid_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 6.9155895709991455,
        "simulation_time": 10.303943634033203,
        "lines_of_code": 107,
        "anomalous": true,
        "vae_anomalous": false
      },
      "combined": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 9.137953281402588,
        "simulation_time": 11.17672872543335,
        "lines_of_code": 106,
        "anomalous": true,
        "vae_anomalous": true
      }
    },
    {
      "circuit_id": 12,
      "circuit_name": "UART Transmitter",
      "category": "State Machine",
      "complexity": "complex",
      "original_prompt": "Design UART transmitter with states: IDLE, START, DATA, STOP. Protocol: START(0), 8 data bits LSB-first, STOP(1). Baud rate divider. Include testbench.",
      "model": "gpt-4o",
      "prompt_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 10.933361053466797,
        "simulation_time": 12.161481142044067,
        "lines_of_code": 115,
        "anomalous": true,
        "vae_anomalous": true
      },
      "mermaid_only": {
        "success": false,
        "compiled": false,
        "simulated": false,
        "has_waveform": false,
        "generation_time": 11.197131395339966,
        "simulation_time": 0.012489080429077148,
        "lines_of_code": 187,
        "anomalous": null,
        "vae_anomalous": null
      },
      "combined": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 9.69006085395813,
        "simulation_time": 9.4739351272583,
        "lines_of_code": 115,
        "anomalous": true,
        "vae_anomalous": true
      }
    },
    {
      "circuit_id": 13,
      "circuit_name": "8-bit Register File",
      "category": "CPU Component",
      "complexity": "complex",
      "original_prompt": "Create 8-register \u00d7 8-bit register file with dual read ports and single write port. Include testbench with simultaneous operations.",
      "model": "gpt-4o",
      "prompt_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 5.199793815612793,
        "simulation_time": 7.272981405258179,
        "lines_of_code": 87,
        "anomalous": true,
        "vae_anomalous": true
      },
      "mermaid_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 6.0007994174957275,
        "simulation_time": 10.483267068862915,
        "lines_of_code": 92,
        "anomalous": false,
        "vae_anomalous": true
      },
      "combined": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 5.754004001617432,
        "simulation_time": 6.947589635848999,
        "lines_of_code": 82,
        "anomalous": false,
        "vae_anomalous": true
      }
    },
    {
      "circuit_id": 14,
      "circuit_name": "PWM Generator",
      "category": "Advanced Sequential",
      "complexity": "complex",
      "original_prompt": "Design 8-bit resolution PWM generator with configurable duty cycle. Include testbench with duty cycles: 0%, 25%, 50%, 75%, 100%.",
      "model": "gpt-4o",
      "prompt_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 7.448906421661377,
        "simulation_time": 8.976146459579468,
        "lines_of_code": 62,
        "anomalous": true,
        "vae_anomalous": false
      },
      "mermaid_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 6.527603626251221,
        "simulation_time": 6.3362956047058105,
        "lines_of_code": 65,
        "anomalous": true,
        "vae_anomalous": false
      },
      "combined": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 3.5000569820404053,
        "simulation_time": 8.482861042022705,
        "lines_of_code": 65,
        "anomalous": true,
        "vae_anomalous": false
      }
    },
    {
      "circuit_id": 15,
      "circuit_name": "SPI Master",
      "category": "Protocol",
      "complexity": "complex",
      "original_prompt": "Design SPI master supporting mode 0 (CPOL=0, CPHA=0). Include SCLK generation, MOSI/MISO handling. Include testbench.",
      "model": "gpt-4o",
      "prompt_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 7.449108123779297,
        "simulation_time": 7.28840970993042,
        "lines_of_code": 81,
        "anomalous": true,
        "vae_anomalous": true
      },
      "mermaid_only": {
        "success": false,
        "compiled": false,
        "simulated": false,
        "has_waveform": false,
        "generation_time": 8.15199327468872,
        "simulation_time": 0.01739215850830078,
        "lines_of_code": 117,
        "anomalous": null,
        "vae_anomalous": null
      },
      "combined": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 8.612457513809204,
        "simulation_time": 13.074628591537476,
        "lines_of_code": 114,
        "anomalous": true,
        "vae_anomalous": true
      }
    },
    {
      "circuit_id": 16,
      "circuit_name": "3-to-8 Decoder",
      "category": "Combinational",
      "complexity": "simple",
      "original_prompt": "Design a 3-to-8 decoder with inputs a[2:0], enable en, and outputs y[7:0]. When enabled, only one output is high based on input. Include testbench testing all combinations.",
      "model": "gpt-4o",
      "prompt_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 4.543407917022705,
        "simulation_time": 7.192800998687744,
        "lines_of_code": 64,
        "anomalous": true,
        "vae_anomalous": false
      },
      "mermaid_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 6.393186569213867,
        "simulation_time": 9.991151571273804,
        "lines_of_code": 62,
        "anomalous": true,
        "vae_anomalous": false
      },
      "combined": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 2.7869882583618164,
        "simulation_time": 6.920788526535034,
        "lines_of_code": 60,
        "anomalous": true,
        "vae_anomalous": false
      }
    },
    {
      "circuit_id": 17,
      "circuit_name": "JK Flip-Flop",
      "category": "Sequential",
      "complexity": "simple",
      "original_prompt": "Create a JK flip-flop with clock, reset, inputs j and k, and outputs q and q_bar. Include testbench verifying all four input combinations (00, 01, 10, 11).",
      "model": "gpt-4o",
      "prompt_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 5.219874143600464,
        "simulation_time": 8.912351131439209,
        "lines_of_code": 69,
        "anomalous": false,
        "vae_anomalous": true
      },
      "mermaid_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 4.25285792350769,
        "simulation_time": 5.850522518157959,
        "lines_of_code": 76,
        "anomalous": false,
        "vae_anomalous": true
      },
      "combined": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 3.679358959197998,
        "simulation_time": 9.591973543167114,
        "lines_of_code": 65,
        "anomalous": false,
        "vae_anomalous": true
      }
    },
    {
      "circuit_id": 18,
      "circuit_name": "8-bit SIPO Shift Register",
      "category": "Sequential",
      "complexity": "simple",
      "original_prompt": "Design an 8-bit Serial-In Parallel-Out (SIPO) shift register with clock, reset, serial input, and parallel output[7:0]. Include testbench shifting in pattern 10101100.",
      "model": "gpt-4o",
      "prompt_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 3.254504919052124,
        "simulation_time": 9.131214141845703,
        "lines_of_code": 56,
        "anomalous": true,
        "vae_anomalous": true
      },
      "mermaid_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 3.3446528911590576,
        "simulation_time": 9.04900574684143,
        "lines_of_code": 58,
        "anomalous": true,
        "vae_anomalous": true
      },
      "combined": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 2.8596608638763428,
        "simulation_time": 6.289299488067627,
        "lines_of_code": 56,
        "anomalous": true,
        "vae_anomalous": false
      }
    },
    {
      "circuit_id": 19,
      "circuit_name": "4-bit XOR Array",
      "category": "Combinational",
      "complexity": "simple",
      "original_prompt": "Create a 4-bit XOR gate array with inputs a[3:0], b[3:0], and output result[3:0] where each bit is result[i] = a[i] XOR b[i]. Include testbench.",
      "model": "gpt-4o",
      "prompt_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 2.4885826110839844,
        "simulation_time": 6.993038654327393,
        "lines_of_code": 39,
        "anomalous": true,
        "vae_anomalous": false
      },
      "mermaid_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 3.307778835296631,
        "simulation_time": 9.362825632095337,
        "lines_of_code": 43,
        "anomalous": true,
        "vae_anomalous": false
      },
      "combined": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 2.8933939933776855,
        "simulation_time": 7.453664779663086,
        "lines_of_code": 41,
        "anomalous": true,
        "vae_anomalous": false
      }
    },
    {
      "circuit_id": 20,
      "circuit_name": "4-bit Magnitude Comparator",
      "category": "Combinational",
      "complexity": "simple",
      "original_prompt": "Design a 4-bit magnitude comparator with inputs a[3:0], b[3:0] and outputs equal, greater, less. Include testbench with boundary cases.",
      "model": "gpt-4o",
      "prompt_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 5.13118577003479,
        "simulation_time": 8.951421737670898,
        "lines_of_code": 73,
        "anomalous": true,
        "vae_anomalous": false
      },
      "mermaid_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 6.078054666519165,
        "simulation_time": 10.687517166137695,
        "lines_of_code": 67,
        "anomalous": true,
        "vae_anomalous": true
      },
      "combined": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 4.116831064224243,
        "simulation_time": 11.271010875701904,
        "lines_of_code": 72,
        "anomalous": true,
        "vae_anomalous": false
      }
    },
    {
      "circuit_id": 21,
      "circuit_name": "8-bit Barrel Shifter",
      "category": "Arithmetic",
      "complexity": "medium",
      "original_prompt": "Design an 8-bit barrel shifter supporting left shift, right shift, and rotate operations. Inputs: data[7:0], shift_amt[2:0], op[1:0] (00=LSL, 01=LSR, 10=ROL, 11=ROR). Output: result[7:0]. Include testbench.",
      "model": "gpt-4o",
      "prompt_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 3.1898415088653564,
        "simulation_time": 8.87333083152771,
        "lines_of_code": 58,
        "anomalous": true,
        "vae_anomalous": false
      },
      "mermaid_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 3.7967209815979004,
        "simulation_time": 9.572946310043335,
        "lines_of_code": 50,
        "anomalous": true,
        "vae_anomalous": false
      },
      "combined": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 4.933146238327026,
        "simulation_time": 8.921703815460205,
        "lines_of_code": 56,
        "anomalous": true,
        "vae_anomalous": false
      }
    },
    {
      "circuit_id": 22,
      "circuit_name": "1-to-8 Demux",
      "category": "Combinational",
      "complexity": "medium",
      "original_prompt": "Create a 1-to-8 demultiplexer with input data_in, select sel[2:0], enable en, and outputs out[7:0]. When enabled, data_in routes to selected output. Include testbench.",
      "model": "gpt-4o",
      "prompt_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 4.178144216537476,
        "simulation_time": 11.234776496887207,
        "lines_of_code": 69,
        "anomalous": true,
        "vae_anomalous": false
      },
      "mermaid_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 6.227901458740234,
        "simulation_time": 7.187247276306152,
        "lines_of_code": 67,
        "anomalous": false,
        "vae_anomalous": false
      },
      "combined": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 3.0880424976348877,
        "simulation_time": 8.788713216781616,
        "lines_of_code": 68,
        "anomalous": true,
        "vae_anomalous": false
      }
    },
    {
      "circuit_id": 23,
      "circuit_name": "Mealy Sequence Detector",
      "category": "State Machine",
      "complexity": "medium",
      "original_prompt": "Design a Mealy FSM detecting sequence 101 in serial input with non-overlapping detection. Output high for one cycle when pattern detected. Include testbench with sequence: 1101011010.",
      "model": "gpt-4o",
      "prompt_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 5.821962833404541,
        "simulation_time": 9.493170738220215,
        "lines_of_code": 100,
        "anomalous": true,
        "vae_anomalous": true
      },
      "mermaid_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 7.560412168502808,
        "simulation_time": 12.158912181854248,
        "lines_of_code": 99,
        "anomalous": true,
        "vae_anomalous": true
      },
      "combined": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 6.905977249145508,
        "simulation_time": 7.680714845657349,
        "lines_of_code": 85,
        "anomalous": true,
        "vae_anomalous": true
      }
    },
    {
      "circuit_id": 24,
      "circuit_name": "8-bit Bidirectional Shift Register",
      "category": "Sequential",
      "complexity": "medium",
      "original_prompt": "Create an 8-bit bidirectional shift register with clock, reset, load, direction (1=right, 0=left), parallel input[7:0], serial_in_left, serial_in_right, and parallel output[7:0]. Include testbench.",
      "model": "gpt-4o",
      "prompt_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 6.3299219608306885,
        "simulation_time": 8.172249794006348,
        "lines_of_code": 69,
        "anomalous": true,
        "vae_anomalous": true
      },
      "mermaid_only": {
        "success": false,
        "compiled": false,
        "simulated": false,
        "has_waveform": false,
        "generation_time": 4.456214189529419,
        "simulation_time": 0.013105630874633789,
        "lines_of_code": 76,
        "anomalous": null,
        "vae_anomalous": null
      },
      "combined": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 4.315809965133667,
        "simulation_time": 10.74191427230835,
        "lines_of_code": 72,
        "anomalous": false,
        "vae_anomalous": true
      }
    },
    {
      "circuit_id": 25,
      "circuit_name": "Binary to Gray Converter",
      "category": "Combinational",
      "complexity": "medium",
      "original_prompt": "Design a 4-bit binary to Gray code converter with input binary[3:0] and output gray[3:0]. Include testbench verifying all 16 conversions.",
      "model": "gpt-4o",
      "prompt_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 4.0808494091033936,
        "simulation_time": 9.533849000930786,
        "lines_of_code": 52,
        "anomalous": true,
        "vae_anomalous": false
      },
      "mermaid_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 4.914769649505615,
        "simulation_time": 8.51125979423523,
        "lines_of_code": 51,
        "anomalous": true,
        "vae_anomalous": false
      },
      "combined": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 8.744746923446655,
        "simulation_time": 8.113905191421509,
        "lines_of_code": 50,
        "anomalous": true,
        "vae_anomalous": false
      }
    },
    {
      "circuit_id": 26,
      "circuit_name": "Vending Machine Controller",
      "category": "State Machine",
      "complexity": "complex",
      "original_prompt": "Design a vending machine FSM that accepts 5\u00a2 and 10\u00a2 coins until 15\u00a2 is reached, then dispenses item and returns change. Inputs: clk, rst, nickel, dime. Outputs: dispense, change[1:0] (in 5\u00a2 units). Include testbench with multiple purchase scenarios.",
      "model": "gpt-4o",
      "prompt_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 10.070737600326538,
        "simulation_time": 23.382559776306152,
        "lines_of_code": 123,
        "anomalous": true,
        "vae_anomalous": false
      },
      "mermaid_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 8.729537963867188,
        "simulation_time": 14.158320903778076,
        "lines_of_code": 101,
        "anomalous": true,
        "vae_anomalous": true
      },
      "combined": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 6.631817102432251,
        "simulation_time": 9.305238008499146,
        "lines_of_code": 103,
        "anomalous": true,
        "vae_anomalous": true
      }
    },
    {
      "circuit_id": 27,
      "circuit_name": "I2C Master Controller",
      "category": "Protocol",
      "complexity": "complex",
      "original_prompt": "Design an I2C master controller with start condition, stop condition, byte transmission, and ACK/NACK handling. Inputs: clk, rst, start, stop, data_in[7:0], wr_en. Outputs: scl, sda_out, sda_oe, busy, ack_received. Include testbench with write transaction.",
      "model": "gpt-4o",
      "prompt_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 14.140233755111694,
        "simulation_time": 10.401132345199585,
        "lines_of_code": 145,
        "anomalous": true,
        "vae_anomalous": true
      },
      "mermaid_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 9.374515533447266,
        "simulation_time": 10.884974241256714,
        "lines_of_code": 137,
        "anomalous": true,
        "vae_anomalous": true
      },
      "combined": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 8.530983448028564,
        "simulation_time": 9.327526807785034,
        "lines_of_code": 156,
        "anomalous": true,
        "vae_anomalous": false
      }
    },
    {
      "circuit_id": 28,
      "circuit_name": "16x8 Dual-Port RAM",
      "category": "CPU Component",
      "complexity": "complex",
      "original_prompt": "Create a 16x8 dual-port RAM with independent read/write ports. Port A: clk_a, we_a, addr_a[3:0], din_a[7:0], dout_a[7:0]. Port B: clk_b, we_b, addr_b[3:0], din_b[7:0], dout_b[7:0]. Include testbench with simultaneous operations.",
      "model": "gpt-4o",
      "prompt_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 3.4261608123779297,
        "simulation_time": 10.134983777999878,
        "lines_of_code": 70,
        "anomalous": false,
        "vae_anomalous": false
      },
      "mermaid_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 8.248483180999756,
        "simulation_time": 6.991580963134766,
        "lines_of_code": 86,
        "anomalous": false,
        "vae_anomalous": false
      },
      "combined": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 8.110711812973022,
        "simulation_time": 10.262047290802002,
        "lines_of_code": 94,
        "anomalous": true,
        "vae_anomalous": false
      }
    },
    {
      "circuit_id": 29,
      "circuit_name": "Programmable Frequency Divider",
      "category": "Advanced Sequential",
      "complexity": "complex",
      "original_prompt": "Design a programmable frequency divider with 8-bit division ratio. Inputs: clk, rst, divisor[7:0] (divides by 2 to 256). Output: clk_out. Generate 50% duty cycle output. Include testbench with divisor values: 2, 4, 8, 16.",
      "model": "gpt-4o",
      "prompt_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 3.529228687286377,
        "simulation_time": 6.760205507278442,
        "lines_of_code": 79,
        "anomalous": true,
        "vae_anomalous": true
      },
      "mermaid_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 7.72647762298584,
        "simulation_time": 10.040687322616577,
        "lines_of_code": 135,
        "anomalous": true,
        "vae_anomalous": true
      },
      "combined": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 2.9519665241241455,
        "simulation_time": 6.397036552429199,
        "lines_of_code": 63,
        "anomalous": true,
        "vae_anomalous": false
      }
    },
    {
      "circuit_id": 30,
      "circuit_name": "UART Receiver",
      "category": "Protocol",
      "complexity": "complex",
      "original_prompt": "Design a UART receiver with states: IDLE, START, DATA, STOP. Protocol: detect START(0), receive 8 data bits LSB-first, verify STOP(1). Inputs: clk, rst, rx. Outputs: rx_data[7:0], rx_valid, frame_error. Baud rate divider. Include testbench.",
      "model": "gpt-4o",
      "prompt_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 8.183438539505005,
        "simulation_time": 0.1710364818572998,
        "lines_of_code": 133,
        "anomalous": false,
        "vae_anomalous": true
      },
      "mermaid_only": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 10.18886947631836,
        "simulation_time": 0.07958507537841797,
        "lines_of_code": 167,
        "anomalous": false,
        "vae_anomalous": true
      },
      "combined": {
        "success": true,
        "compiled": true,
        "simulated": true,
        "has_waveform": true,
        "generation_time": 11.515345573425293,
        "simulation_time": 0.7841293811798096,
        "lines_of_code": 150,
        "anomalous": false,
        "vae_anomalous": true
      }
    }
  ]
}